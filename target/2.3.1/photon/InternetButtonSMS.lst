
c:/Users/SIUV7364/Documents/GitHub/InternetButtonSMS/target/2.3.1/photon/InternetButtonSMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000034f4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3510  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  080a3514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000194  20000078  20000078  00030078  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a358c  080a358c  0002358c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a35b4  080a35b4  000235b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00151e56  00000000  00000000  000235b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001792f  00000000  00000000  0017540e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ed61  00000000  00000000  0018cd3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022c0  00000000  00000000  001aba9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005780  00000000  00000000  001add5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002b41b  00000000  00000000  001b34de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003519f  00000000  00000000  001de8f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b4c87  00000000  00000000  00213a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005b58  00000000  00000000  002c8720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 f898 	bl	80a3162 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 f8a0 	bl	80a317e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3514 	.word	0x080a3514
 80a004c:	20000078 	.word	0x20000078
 80a0050:	20000078 	.word	0x20000078
 80a0054:	20000209 	.word	0x20000209
 80a0058:	20000209 	.word	0x20000209

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f9ed 	bl	80a243c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a34e4 	.word	0x080a34e4
 80a0080:	080a350c 	.word	0x080a350c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b816 	b.w	80a00b4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f9ab 	bl	80a03e4 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 b98b 	b.w	80a23ac <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f001 bfb5 	b.w	80a2004 <malloc>

080a009a <_Znaj>:
 80a009a:	f001 bfb3 	b.w	80a2004 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f001 bfb9 	b.w	80a2014 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
 80a00b4:	b510      	push	{r4, lr}
 80a00b6:	4812      	ldr	r0, [pc, #72]	; (80a0100 <setup+0x4c>)
 80a00b8:	f000 fad2 	bl	80a0660 <_ZN14InternetButton5beginEv>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a00bc:	4a11      	ldr	r2, [pc, #68]	; (80a0104 <setup+0x50>)
 80a00be:	4912      	ldr	r1, [pc, #72]	; (80a0108 <setup+0x54>)
 80a00c0:	4812      	ldr	r0, [pc, #72]	; (80a010c <setup+0x58>)
 80a00c2:	f002 fa48 	bl	80a2556 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a00c6:	4a12      	ldr	r2, [pc, #72]	; (80a0110 <setup+0x5c>)
 80a00c8:	4912      	ldr	r1, [pc, #72]	; (80a0114 <setup+0x60>)
 80a00ca:	4810      	ldr	r0, [pc, #64]	; (80a010c <setup+0x58>)
 80a00cc:	f002 fa43 	bl	80a2556 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a00d0:	f002 fd6c 	bl	80a2bac <_Z16_fetch_usbserialv>
 80a00d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00d8:	f002 fd5c 	bl	80a2b94 <_ZN9USBSerial5beginEl>
 80a00dc:	f241 3487 	movw	r4, #4999	; 0x1387
 80a00e0:	f002 fd64 	bl	80a2bac <_Z16_fetch_usbserialv>
 80a00e4:	6803      	ldr	r3, [r0, #0]
 80a00e6:	691b      	ldr	r3, [r3, #16]
 80a00e8:	4798      	blx	r3
 80a00ea:	b940      	cbnz	r0, 80a00fe <setup+0x4a>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00ec:	f001 fdcc 	bl	80a1c88 <HAL_Timer_Get_Milli_Seconds>
 80a00f0:	42a0      	cmp	r0, r4
 80a00f2:	d804      	bhi.n	80a00fe <setup+0x4a>
 80a00f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a00f8:	f002 f8fe 	bl	80a22f8 <delay>
 80a00fc:	e7f0      	b.n	80a00e0 <setup+0x2c>
 80a00fe:	bd10      	pop	{r4, pc}
 80a0100:	2000007c 	.word	0x2000007c
 80a0104:	080a3318 	.word	0x080a3318
 80a0108:	080a052d 	.word	0x080a052d
 80a010c:	080a252b 	.word	0x080a252b
 80a0110:	080a3320 	.word	0x080a3320
 80a0114:	080a04d1 	.word	0x080a04d1

080a0118 <_Z4spinhhhh>:
 80a0118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a011c:	4683      	mov	fp, r0
 80a011e:	200b      	movs	r0, #11
 80a0120:	fbbb f5f0 	udiv	r5, fp, r0
 80a0124:	b0a9      	sub	sp, #164	; 0xa4
 80a0126:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80a012a:	ebab 0145 	sub.w	r1, fp, r5, lsl #1
 80a012e:	9326      	str	r3, [sp, #152]	; 0x98
 80a0130:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 80a0134:	b2db      	uxtb	r3, r3
 80a0136:	9305      	str	r3, [sp, #20]
 80a0138:	9b02      	ldr	r3, [sp, #8]
 80a013a:	1b49      	subs	r1, r1, r5
 80a013c:	fbb3 f4f0 	udiv	r4, r3, r0
 80a0140:	eba3 0244 	sub.w	r2, r3, r4, lsl #1
 80a0144:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80a0148:	b2db      	uxtb	r3, r3
 80a014a:	9306      	str	r3, [sp, #24]
 80a014c:	9b03      	ldr	r3, [sp, #12]
 80a014e:	1b12      	subs	r2, r2, r4
 80a0150:	fbb3 f0f0 	udiv	r0, r3, r0
 80a0154:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80a0158:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 80a015c:	b2f6      	uxtb	r6, r6
 80a015e:	9607      	str	r6, [sp, #28]
 80a0160:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
 80a0164:	b2f6      	uxtb	r6, r6
 80a0166:	9609      	str	r6, [sp, #36]	; 0x24
 80a0168:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
 80a016c:	b2f6      	uxtb	r6, r6
 80a016e:	1a1b      	subs	r3, r3, r0
 80a0170:	960a      	str	r6, [sp, #40]	; 0x28
 80a0172:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 80a0176:	1b49      	subs	r1, r1, r5
 80a0178:	b2f6      	uxtb	r6, r6
 80a017a:	960b      	str	r6, [sp, #44]	; 0x2c
 80a017c:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
 80a0180:	1b12      	subs	r2, r2, r4
 80a0182:	b2f6      	uxtb	r6, r6
 80a0184:	960d      	str	r6, [sp, #52]	; 0x34
 80a0186:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
 80a018a:	b2f6      	uxtb	r6, r6
 80a018c:	1a1b      	subs	r3, r3, r0
 80a018e:	960e      	str	r6, [sp, #56]	; 0x38
 80a0190:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 80a0194:	1b49      	subs	r1, r1, r5
 80a0196:	b2f6      	uxtb	r6, r6
 80a0198:	960f      	str	r6, [sp, #60]	; 0x3c
 80a019a:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
 80a019e:	1b12      	subs	r2, r2, r4
 80a01a0:	b2f6      	uxtb	r6, r6
 80a01a2:	9611      	str	r6, [sp, #68]	; 0x44
 80a01a4:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
 80a01a8:	b2f6      	uxtb	r6, r6
 80a01aa:	1a1b      	subs	r3, r3, r0
 80a01ac:	9612      	str	r6, [sp, #72]	; 0x48
 80a01ae:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 80a01b2:	1b49      	subs	r1, r1, r5
 80a01b4:	b2f6      	uxtb	r6, r6
 80a01b6:	9613      	str	r6, [sp, #76]	; 0x4c
 80a01b8:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
 80a01bc:	1b12      	subs	r2, r2, r4
 80a01be:	b2f6      	uxtb	r6, r6
 80a01c0:	9615      	str	r6, [sp, #84]	; 0x54
 80a01c2:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
 80a01c6:	b2f6      	uxtb	r6, r6
 80a01c8:	1a1b      	subs	r3, r3, r0
 80a01ca:	9616      	str	r6, [sp, #88]	; 0x58
 80a01cc:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 80a01d0:	1b49      	subs	r1, r1, r5
 80a01d2:	b2f6      	uxtb	r6, r6
 80a01d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80a01d6:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
 80a01da:	1b12      	subs	r2, r2, r4
 80a01dc:	b2f6      	uxtb	r6, r6
 80a01de:	9619      	str	r6, [sp, #100]	; 0x64
 80a01e0:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
 80a01e4:	b2f6      	uxtb	r6, r6
 80a01e6:	1a1b      	subs	r3, r3, r0
 80a01e8:	961a      	str	r6, [sp, #104]	; 0x68
 80a01ea:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 80a01ee:	1b49      	subs	r1, r1, r5
 80a01f0:	b2f6      	uxtb	r6, r6
 80a01f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80a01f4:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
 80a01f8:	1b12      	subs	r2, r2, r4
 80a01fa:	b2f6      	uxtb	r6, r6
 80a01fc:	961d      	str	r6, [sp, #116]	; 0x74
 80a01fe:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
 80a0202:	b2f6      	uxtb	r6, r6
 80a0204:	1a1b      	subs	r3, r3, r0
 80a0206:	961e      	str	r6, [sp, #120]	; 0x78
 80a0208:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 80a020c:	1b49      	subs	r1, r1, r5
 80a020e:	b2f6      	uxtb	r6, r6
 80a0210:	961f      	str	r6, [sp, #124]	; 0x7c
 80a0212:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
 80a0216:	1b12      	subs	r2, r2, r4
 80a0218:	b2f6      	uxtb	r6, r6
 80a021a:	9620      	str	r6, [sp, #128]	; 0x80
 80a021c:	1b49      	subs	r1, r1, r5
 80a021e:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
 80a0222:	2500      	movs	r5, #0
 80a0224:	1b12      	subs	r2, r2, r4
 80a0226:	240c      	movs	r4, #12
 80a0228:	b2f6      	uxtb	r6, r6
 80a022a:	1a1b      	subs	r3, r3, r0
 80a022c:	9621      	str	r6, [sp, #132]	; 0x84
 80a022e:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 80a0232:	1a1b      	subs	r3, r3, r0
 80a0234:	b2f6      	uxtb	r6, r6
 80a0236:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80a023a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80a023e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a0242:	9622      	str	r6, [sp, #136]	; 0x88
 80a0244:	b2c9      	uxtb	r1, r1
 80a0246:	b2d2      	uxtb	r2, r2
 80a0248:	b2db      	uxtb	r3, r3
 80a024a:	4e5a      	ldr	r6, [pc, #360]	; (80a03b4 <_Z4spinhhhh+0x29c>)
 80a024c:	9123      	str	r1, [sp, #140]	; 0x8c
 80a024e:	9224      	str	r2, [sp, #144]	; 0x90
 80a0250:	9325      	str	r3, [sp, #148]	; 0x94
 80a0252:	1e6a      	subs	r2, r5, #1
 80a0254:	fb92 f3f4 	sdiv	r3, r2, r4
 80a0258:	fb04 2313 	mls	r3, r4, r3, r2
 80a025c:	1eaa      	subs	r2, r5, #2
 80a025e:	b2db      	uxtb	r3, r3
 80a0260:	9304      	str	r3, [sp, #16]
 80a0262:	fb92 f3f4 	sdiv	r3, r2, r4
 80a0266:	fb04 2313 	mls	r3, r4, r3, r2
 80a026a:	1eea      	subs	r2, r5, #3
 80a026c:	b2db      	uxtb	r3, r3
 80a026e:	9308      	str	r3, [sp, #32]
 80a0270:	fb92 f3f4 	sdiv	r3, r2, r4
 80a0274:	fb04 2313 	mls	r3, r4, r3, r2
 80a0278:	1f2a      	subs	r2, r5, #4
 80a027a:	b2db      	uxtb	r3, r3
 80a027c:	930c      	str	r3, [sp, #48]	; 0x30
 80a027e:	fb92 f3f4 	sdiv	r3, r2, r4
 80a0282:	fb04 2313 	mls	r3, r4, r3, r2
 80a0286:	1f6a      	subs	r2, r5, #5
 80a0288:	b2db      	uxtb	r3, r3
 80a028a:	9310      	str	r3, [sp, #64]	; 0x40
 80a028c:	fb92 f3f4 	sdiv	r3, r2, r4
 80a0290:	fb04 2313 	mls	r3, r4, r3, r2
 80a0294:	1faa      	subs	r2, r5, #6
 80a0296:	b2db      	uxtb	r3, r3
 80a0298:	9314      	str	r3, [sp, #80]	; 0x50
 80a029a:	fb92 f3f4 	sdiv	r3, r2, r4
 80a029e:	fb04 2313 	mls	r3, r4, r3, r2
 80a02a2:	1fea      	subs	r2, r5, #7
 80a02a4:	b2db      	uxtb	r3, r3
 80a02a6:	9318      	str	r3, [sp, #96]	; 0x60
 80a02a8:	fb92 f3f4 	sdiv	r3, r2, r4
 80a02ac:	fb04 2313 	mls	r3, r4, r3, r2
 80a02b0:	b2db      	uxtb	r3, r3
 80a02b2:	931c      	str	r3, [sp, #112]	; 0x70
 80a02b4:	f1a5 0308 	sub.w	r3, r5, #8
 80a02b8:	fb93 faf4 	sdiv	sl, r3, r4
 80a02bc:	fb04 3a1a 	mls	sl, r4, sl, r3
 80a02c0:	f1a5 0309 	sub.w	r3, r5, #9
 80a02c4:	fb93 f9f4 	sdiv	r9, r3, r4
 80a02c8:	fb04 3919 	mls	r9, r4, r9, r3
 80a02cc:	f1a5 030a 	sub.w	r3, r5, #10
 80a02d0:	fb93 f8f4 	sdiv	r8, r3, r4
 80a02d4:	270d      	movs	r7, #13
 80a02d6:	fb04 3818 	mls	r8, r4, r8, r3
 80a02da:	b2eb      	uxtb	r3, r5
 80a02dc:	fa5f fa8a 	uxtb.w	sl, sl
 80a02e0:	fa5f f989 	uxtb.w	r9, r9
 80a02e4:	fa5f f888 	uxtb.w	r8, r8
 80a02e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80a02ea:	9b03      	ldr	r3, [sp, #12]
 80a02ec:	465a      	mov	r2, fp
 80a02ee:	4630      	mov	r0, r6
 80a02f0:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80a02f2:	9300      	str	r3, [sp, #0]
 80a02f4:	9b02      	ldr	r3, [sp, #8]
 80a02f6:	f000 f9e5 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a02fa:	9b07      	ldr	r3, [sp, #28]
 80a02fc:	4630      	mov	r0, r6
 80a02fe:	9904      	ldr	r1, [sp, #16]
 80a0300:	9300      	str	r3, [sp, #0]
 80a0302:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80a0306:	f000 f9dd 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a030a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a030c:	4630      	mov	r0, r6
 80a030e:	9908      	ldr	r1, [sp, #32]
 80a0310:	9300      	str	r3, [sp, #0]
 80a0312:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80a0316:	f000 f9d5 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a031a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a031c:	4630      	mov	r0, r6
 80a031e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a0320:	9300      	str	r3, [sp, #0]
 80a0322:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80a0326:	f000 f9cd 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a032a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a032c:	4630      	mov	r0, r6
 80a032e:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a0330:	9300      	str	r3, [sp, #0]
 80a0332:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	; 0x44
 80a0336:	f000 f9c5 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a033a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a033c:	4630      	mov	r0, r6
 80a033e:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a0340:	9300      	str	r3, [sp, #0]
 80a0342:	e9dd 2315 	ldrd	r2, r3, [sp, #84]	; 0x54
 80a0346:	f000 f9bd 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a034a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a034c:	4630      	mov	r0, r6
 80a034e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a0350:	9300      	str	r3, [sp, #0]
 80a0352:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 80a0356:	f000 f9b5 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a035a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80a035c:	4630      	mov	r0, r6
 80a035e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a0360:	9300      	str	r3, [sp, #0]
 80a0362:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 80a0366:	f000 f9ad 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a036a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80a036c:	4651      	mov	r1, sl
 80a036e:	4630      	mov	r0, r6
 80a0370:	9300      	str	r3, [sp, #0]
 80a0372:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80a0376:	f000 f9a5 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a037a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80a037c:	4649      	mov	r1, r9
 80a037e:	4630      	mov	r0, r6
 80a0380:	9300      	str	r3, [sp, #0]
 80a0382:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 80a0386:	f000 f99d 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a038a:	2300      	movs	r3, #0
 80a038c:	4641      	mov	r1, r8
 80a038e:	461a      	mov	r2, r3
 80a0390:	4630      	mov	r0, r6
 80a0392:	9300      	str	r3, [sp, #0]
 80a0394:	3f01      	subs	r7, #1
 80a0396:	f000 f995 	bl	80a06c4 <_ZN14InternetButton5ledOnEhhhh>
 80a039a:	b2bf      	uxth	r7, r7
 80a039c:	9826      	ldr	r0, [sp, #152]	; 0x98
 80a039e:	f001 ffab 	bl	80a22f8 <delay>
 80a03a2:	2f00      	cmp	r7, #0
 80a03a4:	d1a1      	bne.n	80a02ea <_Z4spinhhhh+0x1d2>
 80a03a6:	3501      	adds	r5, #1
 80a03a8:	2d19      	cmp	r5, #25
 80a03aa:	f47f af52 	bne.w	80a0252 <_Z4spinhhhh+0x13a>
 80a03ae:	b029      	add	sp, #164	; 0xa4
 80a03b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a03b4:	2000007c 	.word	0x2000007c

080a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a03b8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a03ba:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a03bc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a03be:	b17c      	cbz	r4, 80a03e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a03c0:	6863      	ldr	r3, [r4, #4]
 80a03c2:	3b01      	subs	r3, #1
 80a03c4:	6063      	str	r3, [r4, #4]
 80a03c6:	b95b      	cbnz	r3, 80a03e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a03c8:	6823      	ldr	r3, [r4, #0]
 80a03ca:	4620      	mov	r0, r4
 80a03cc:	689b      	ldr	r3, [r3, #8]
 80a03ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a03d0:	68a3      	ldr	r3, [r4, #8]
 80a03d2:	3b01      	subs	r3, #1
 80a03d4:	60a3      	str	r3, [r4, #8]
 80a03d6:	b91b      	cbnz	r3, 80a03e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a03d8:	6823      	ldr	r3, [r4, #0]
 80a03da:	4620      	mov	r0, r4
 80a03dc:	68db      	ldr	r3, [r3, #12]
 80a03de:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a03e0:	4628      	mov	r0, r5
 80a03e2:	bd38      	pop	{r3, r4, r5, pc}

080a03e4 <loop>:
 80a03e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a03e6:	4c33      	ldr	r4, [pc, #204]	; (80a04b4 <loop+0xd0>)
 80a03e8:	7823      	ldrb	r3, [r4, #0]
 80a03ea:	b9cb      	cbnz	r3, 80a0420 <loop+0x3c>
 80a03ec:	4832      	ldr	r0, [pc, #200]	; (80a04b8 <loop+0xd4>)
 80a03ee:	f000 f99d 	bl	80a072c <_ZN14InternetButton10allLedsOffEv>
 80a03f2:	2102      	movs	r1, #2
 80a03f4:	4830      	ldr	r0, [pc, #192]	; (80a04b8 <loop+0xd4>)
 80a03f6:	f000 f9af 	bl	80a0758 <_ZN14InternetButton8buttonOnEh>
 80a03fa:	4606      	mov	r6, r0
 80a03fc:	2800      	cmp	r0, #0
 80a03fe:	d034      	beq.n	80a046a <loop+0x86>
 80a0400:	4b2e      	ldr	r3, [pc, #184]	; (80a04bc <loop+0xd8>)
 80a0402:	2200      	movs	r2, #0
 80a0404:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0406:	492e      	ldr	r1, [pc, #184]	; (80a04c0 <loop+0xdc>)
 80a0408:	f88d 3000 	strb.w	r3, [sp]
 80a040c:	233c      	movs	r3, #60	; 0x3c
 80a040e:	7022      	strb	r2, [r4, #0]
 80a0410:	a802      	add	r0, sp, #8
 80a0412:	f002 f993 	bl	80a273c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0416:	a803      	add	r0, sp, #12
 80a0418:	f7ff ffce 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a041c:	b004      	add	sp, #16
 80a041e:	bd70      	pop	{r4, r5, r6, pc}
 80a0420:	4b28      	ldr	r3, [pc, #160]	; (80a04c4 <loop+0xe0>)
 80a0422:	681b      	ldr	r3, [r3, #0]
 80a0424:	2b03      	cmp	r3, #3
 80a0426:	d8e4      	bhi.n	80a03f2 <loop+0xe>
 80a0428:	e8df f003 	tbb	[pc, r3]
 80a042c:	1a120702 	.word	0x1a120702
 80a0430:	2105      	movs	r1, #5
 80a0432:	4821      	ldr	r0, [pc, #132]	; (80a04b8 <loop+0xd4>)
 80a0434:	f000 f9c6 	bl	80a07c4 <_ZN14InternetButton7rainbowEh>
 80a0438:	e7db      	b.n	80a03f2 <loop+0xe>
 80a043a:	2200      	movs	r2, #0
 80a043c:	2301      	movs	r3, #1
 80a043e:	4611      	mov	r1, r2
 80a0440:	20ff      	movs	r0, #255	; 0xff
 80a0442:	f7ff fe69 	bl	80a0118 <_Z4spinhhhh>
 80a0446:	21c8      	movs	r1, #200	; 0xc8
 80a0448:	481b      	ldr	r0, [pc, #108]	; (80a04b8 <loop+0xd4>)
 80a044a:	f000 f995 	bl	80a0778 <_ZN14InternetButton5wheelEh>
 80a044e:	e7d0      	b.n	80a03f2 <loop+0xe>
 80a0450:	2100      	movs	r1, #0
 80a0452:	2301      	movs	r3, #1
 80a0454:	22ff      	movs	r2, #255	; 0xff
 80a0456:	4608      	mov	r0, r1
 80a0458:	f7ff fe5e 	bl	80a0118 <_Z4spinhhhh>
 80a045c:	2114      	movs	r1, #20
 80a045e:	e7f3      	b.n	80a0448 <loop+0x64>
 80a0460:	2200      	movs	r2, #0
 80a0462:	2301      	movs	r3, #1
 80a0464:	21ff      	movs	r1, #255	; 0xff
 80a0466:	4610      	mov	r0, r2
 80a0468:	e7f6      	b.n	80a0458 <loop+0x74>
 80a046a:	2103      	movs	r1, #3
 80a046c:	4812      	ldr	r0, [pc, #72]	; (80a04b8 <loop+0xd4>)
 80a046e:	f000 f973 	bl	80a0758 <_ZN14InternetButton8buttonOnEh>
 80a0472:	4605      	mov	r5, r0
 80a0474:	b168      	cbz	r0, 80a0492 <loop+0xae>
 80a0476:	231e      	movs	r3, #30
 80a0478:	2278      	movs	r2, #120	; 0x78
 80a047a:	2132      	movs	r1, #50	; 0x32
 80a047c:	2019      	movs	r0, #25
 80a047e:	f7ff fe4b 	bl	80a0118 <_Z4spinhhhh>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0482:	4b0e      	ldr	r3, [pc, #56]	; (80a04bc <loop+0xd8>)
 80a0484:	4632      	mov	r2, r6
 80a0486:	781b      	ldrb	r3, [r3, #0]
 80a0488:	490f      	ldr	r1, [pc, #60]	; (80a04c8 <loop+0xe4>)
 80a048a:	f88d 3000 	strb.w	r3, [sp]
 80a048e:	233c      	movs	r3, #60	; 0x3c
 80a0490:	e7be      	b.n	80a0410 <loop+0x2c>
 80a0492:	2104      	movs	r1, #4
 80a0494:	4808      	ldr	r0, [pc, #32]	; (80a04b8 <loop+0xd4>)
 80a0496:	f000 f95f 	bl	80a0758 <_ZN14InternetButton8buttonOnEh>
 80a049a:	2800      	cmp	r0, #0
 80a049c:	d0be      	beq.n	80a041c <loop+0x38>
 80a049e:	2301      	movs	r3, #1
 80a04a0:	7023      	strb	r3, [r4, #0]
 80a04a2:	4b06      	ldr	r3, [pc, #24]	; (80a04bc <loop+0xd8>)
 80a04a4:	462a      	mov	r2, r5
 80a04a6:	781b      	ldrb	r3, [r3, #0]
 80a04a8:	4908      	ldr	r1, [pc, #32]	; (80a04cc <loop+0xe8>)
 80a04aa:	f88d 3000 	strb.w	r3, [sp]
 80a04ae:	233c      	movs	r3, #60	; 0x3c
 80a04b0:	e7ae      	b.n	80a0410 <loop+0x2c>
 80a04b2:	bf00      	nop
 80a04b4:	20000078 	.word	0x20000078
 80a04b8:	2000007c 	.word	0x2000007c
 80a04bc:	20000079 	.word	0x20000079
 80a04c0:	080a3326 	.word	0x080a3326
 80a04c4:	20000000 	.word	0x20000000
 80a04c8:	080a332e 	.word	0x080a332e
 80a04cc:	080a3336 	.word	0x080a3336

080a04d0 <_Z12ClearRainbow6String>:
 80a04d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a04d2:	4913      	ldr	r1, [pc, #76]	; (80a0520 <_Z12ClearRainbow6String+0x50>)
 80a04d4:	4604      	mov	r4, r0
 80a04d6:	f001 fe82 	bl	80a21de <_ZNK6String6equalsEPKc>
 80a04da:	4b12      	ldr	r3, [pc, #72]	; (80a0524 <_Z12ClearRainbow6String+0x54>)
 80a04dc:	4602      	mov	r2, r0
 80a04de:	b180      	cbz	r0, 80a0502 <_Z12ClearRainbow6String+0x32>
 80a04e0:	2200      	movs	r2, #0
 80a04e2:	781b      	ldrb	r3, [r3, #0]
 80a04e4:	4910      	ldr	r1, [pc, #64]	; (80a0528 <_Z12ClearRainbow6String+0x58>)
 80a04e6:	a802      	add	r0, sp, #8
 80a04e8:	700a      	strb	r2, [r1, #0]
 80a04ea:	6821      	ldr	r1, [r4, #0]
 80a04ec:	f88d 3000 	strb.w	r3, [sp]
 80a04f0:	233c      	movs	r3, #60	; 0x3c
 80a04f2:	f002 f923 	bl	80a273c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a04f6:	a803      	add	r0, sp, #12
 80a04f8:	f7ff ff5e 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a04fc:	2001      	movs	r0, #1
 80a04fe:	b004      	add	sp, #16
 80a0500:	bd10      	pop	{r4, pc}
 80a0502:	781b      	ldrb	r3, [r3, #0]
 80a0504:	6821      	ldr	r1, [r4, #0]
 80a0506:	f88d 3000 	strb.w	r3, [sp]
 80a050a:	a802      	add	r0, sp, #8
 80a050c:	233c      	movs	r3, #60	; 0x3c
 80a050e:	f002 f915 	bl	80a273c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0512:	a803      	add	r0, sp, #12
 80a0514:	f7ff ff50 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0518:	f04f 30ff 	mov.w	r0, #4294967295
 80a051c:	e7ef      	b.n	80a04fe <_Z12ClearRainbow6String+0x2e>
 80a051e:	bf00      	nop
 80a0520:	080a333e 	.word	0x080a333e
 80a0524:	20000079 	.word	0x20000079
 80a0528:	20000078 	.word	0x20000078

080a052c <_Z3SMS6String>:
 80a052c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0530:	4938      	ldr	r1, [pc, #224]	; (80a0614 <_Z3SMS6String+0xe8>)
 80a0532:	4605      	mov	r5, r0
 80a0534:	f001 fe53 	bl	80a21de <_ZNK6String6equalsEPKc>
 80a0538:	4e37      	ldr	r6, [pc, #220]	; (80a0618 <_Z3SMS6String+0xec>)
 80a053a:	4607      	mov	r7, r0
 80a053c:	b180      	cbz	r0, 80a0560 <_Z3SMS6String+0x34>
 80a053e:	2401      	movs	r4, #1
 80a0540:	2700      	movs	r7, #0
 80a0542:	4b36      	ldr	r3, [pc, #216]	; (80a061c <_Z3SMS6String+0xf0>)
 80a0544:	701c      	strb	r4, [r3, #0]
 80a0546:	4b36      	ldr	r3, [pc, #216]	; (80a0620 <_Z3SMS6String+0xf4>)
 80a0548:	601f      	str	r7, [r3, #0]
 80a054a:	f002 fb2f 	bl	80a2bac <_Z16_fetch_usbserialv>
 80a054e:	4935      	ldr	r1, [pc, #212]	; (80a0624 <_Z3SMS6String+0xf8>)
 80a0550:	f001 fe8c 	bl	80a226c <_ZN5Print7printlnEPKc>
 80a0554:	7833      	ldrb	r3, [r6, #0]
 80a0556:	463a      	mov	r2, r7
 80a0558:	f88d 3000 	strb.w	r3, [sp]
 80a055c:	233c      	movs	r3, #60	; 0x3c
 80a055e:	e024      	b.n	80a05aa <_Z3SMS6String+0x7e>
 80a0560:	4628      	mov	r0, r5
 80a0562:	4931      	ldr	r1, [pc, #196]	; (80a0628 <_Z3SMS6String+0xfc>)
 80a0564:	f001 fe3b 	bl	80a21de <_ZNK6String6equalsEPKc>
 80a0568:	4680      	mov	r8, r0
 80a056a:	b140      	cbz	r0, 80a057e <_Z3SMS6String+0x52>
 80a056c:	2401      	movs	r4, #1
 80a056e:	4b2b      	ldr	r3, [pc, #172]	; (80a061c <_Z3SMS6String+0xf0>)
 80a0570:	701c      	strb	r4, [r3, #0]
 80a0572:	4b2b      	ldr	r3, [pc, #172]	; (80a0620 <_Z3SMS6String+0xf4>)
 80a0574:	601c      	str	r4, [r3, #0]
 80a0576:	f002 fb19 	bl	80a2bac <_Z16_fetch_usbserialv>
 80a057a:	492c      	ldr	r1, [pc, #176]	; (80a062c <_Z3SMS6String+0x100>)
 80a057c:	e7e8      	b.n	80a0550 <_Z3SMS6String+0x24>
 80a057e:	4628      	mov	r0, r5
 80a0580:	492b      	ldr	r1, [pc, #172]	; (80a0630 <_Z3SMS6String+0x104>)
 80a0582:	f001 fe2c 	bl	80a21de <_ZNK6String6equalsEPKc>
 80a0586:	4607      	mov	r7, r0
 80a0588:	b1d0      	cbz	r0, 80a05c0 <_Z3SMS6String+0x94>
 80a058a:	2401      	movs	r4, #1
 80a058c:	2202      	movs	r2, #2
 80a058e:	4b23      	ldr	r3, [pc, #140]	; (80a061c <_Z3SMS6String+0xf0>)
 80a0590:	701c      	strb	r4, [r3, #0]
 80a0592:	4b23      	ldr	r3, [pc, #140]	; (80a0620 <_Z3SMS6String+0xf4>)
 80a0594:	601a      	str	r2, [r3, #0]
 80a0596:	f002 fb09 	bl	80a2bac <_Z16_fetch_usbserialv>
 80a059a:	4926      	ldr	r1, [pc, #152]	; (80a0634 <_Z3SMS6String+0x108>)
 80a059c:	f001 fe66 	bl	80a226c <_ZN5Print7printlnEPKc>
 80a05a0:	7833      	ldrb	r3, [r6, #0]
 80a05a2:	4642      	mov	r2, r8
 80a05a4:	f88d 3000 	strb.w	r3, [sp]
 80a05a8:	233c      	movs	r3, #60	; 0x3c
 80a05aa:	a802      	add	r0, sp, #8
 80a05ac:	6829      	ldr	r1, [r5, #0]
 80a05ae:	f002 f8c5 	bl	80a273c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a05b2:	a803      	add	r0, sp, #12
 80a05b4:	f7ff ff00 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a05b8:	4620      	mov	r0, r4
 80a05ba:	b004      	add	sp, #16
 80a05bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a05c0:	4628      	mov	r0, r5
 80a05c2:	491d      	ldr	r1, [pc, #116]	; (80a0638 <_Z3SMS6String+0x10c>)
 80a05c4:	f001 fe0b 	bl	80a21de <_ZNK6String6equalsEPKc>
 80a05c8:	4604      	mov	r4, r0
 80a05ca:	b148      	cbz	r0, 80a05e0 <_Z3SMS6String+0xb4>
 80a05cc:	2401      	movs	r4, #1
 80a05ce:	2203      	movs	r2, #3
 80a05d0:	4b12      	ldr	r3, [pc, #72]	; (80a061c <_Z3SMS6String+0xf0>)
 80a05d2:	701c      	strb	r4, [r3, #0]
 80a05d4:	4b12      	ldr	r3, [pc, #72]	; (80a0620 <_Z3SMS6String+0xf4>)
 80a05d6:	601a      	str	r2, [r3, #0]
 80a05d8:	f002 fae8 	bl	80a2bac <_Z16_fetch_usbserialv>
 80a05dc:	4917      	ldr	r1, [pc, #92]	; (80a063c <_Z3SMS6String+0x110>)
 80a05de:	e7b7      	b.n	80a0550 <_Z3SMS6String+0x24>
 80a05e0:	f002 fae4 	bl	80a2bac <_Z16_fetch_usbserialv>
 80a05e4:	4916      	ldr	r1, [pc, #88]	; (80a0640 <_Z3SMS6String+0x114>)
 80a05e6:	f001 fe41 	bl	80a226c <_ZN5Print7printlnEPKc>
 80a05ea:	f002 fadf 	bl	80a2bac <_Z16_fetch_usbserialv>
 80a05ee:	6829      	ldr	r1, [r5, #0]
 80a05f0:	f001 fe3c 	bl	80a226c <_ZN5Print7printlnEPKc>
 80a05f4:	7833      	ldrb	r3, [r6, #0]
 80a05f6:	4622      	mov	r2, r4
 80a05f8:	6829      	ldr	r1, [r5, #0]
 80a05fa:	f88d 3000 	strb.w	r3, [sp]
 80a05fe:	a802      	add	r0, sp, #8
 80a0600:	233c      	movs	r3, #60	; 0x3c
 80a0602:	f002 f89b 	bl	80a273c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0606:	a803      	add	r0, sp, #12
 80a0608:	f7ff fed6 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a060c:	f04f 34ff 	mov.w	r4, #4294967295
 80a0610:	e7d2      	b.n	80a05b8 <_Z3SMS6String+0x8c>
 80a0612:	bf00      	nop
 80a0614:	080a3341 	.word	0x080a3341
 80a0618:	20000079 	.word	0x20000079
 80a061c:	20000078 	.word	0x20000078
 80a0620:	20000000 	.word	0x20000000
 80a0624:	080a334a 	.word	0x080a334a
 80a0628:	080a3352 	.word	0x080a3352
 80a062c:	080a3357 	.word	0x080a3357
 80a0630:	080a335b 	.word	0x080a335b
 80a0634:	080a3361 	.word	0x080a3361
 80a0638:	080a3366 	.word	0x080a3366
 80a063c:	080a336d 	.word	0x080a336d
 80a0640:	080a3373 	.word	0x080a3373

080a0644 <_GLOBAL__sub_I_Color>:
        val_(val) {
 80a0644:	2201      	movs	r2, #1
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <_GLOBAL__sub_I_Color+0xc>)
 80a0648:	4802      	ldr	r0, [pc, #8]	; (80a0654 <_GLOBAL__sub_I_Color+0x10>)
 80a064a:	701a      	strb	r2, [r3, #0]
 80a064c:	f000 b804 	b.w	80a0658 <_ZN14InternetButtonC1Ev>
 80a0650:	20000079 	.word	0x20000079
 80a0654:	2000007c 	.word	0x2000007c

080a0658 <_ZN14InternetButtonC1Ev>:
STARTUP(pinMode(pin, INPUT_PULLDOWN);)

Adafruit_NeoPixel ring = Adafruit_NeoPixel(PIXEL_COUNT, pin, PIXEL_TYPE);
ADXL362 accelerometer;

InternetButton::InternetButton(){
 80a0658:	23fa      	movs	r3, #250	; 0xfa
 80a065a:	6003      	str	r3, [r0, #0]

}
 80a065c:	4770      	bx	lr
	...

080a0660 <_ZN14InternetButton5beginEv>:

void InternetButton::begin(){
 80a0660:	b510      	push	{r4, lr}
    ring.begin();
 80a0662:	4c12      	ldr	r4, [pc, #72]	; (80a06ac <_ZN14InternetButton5beginEv+0x4c>)
 80a0664:	4620      	mov	r0, r4
 80a0666:	f000 f90b 	bl	80a0880 <_ZN17Adafruit_NeoPixel5beginEv>
    ring.show();
 80a066a:	4620      	mov	r0, r4

    accelerometer.begin();                   // Setup SPI protocol, issue device soft reset
 80a066c:	4c10      	ldr	r4, [pc, #64]	; (80a06b0 <_ZN14InternetButton5beginEv+0x50>)
    ring.show();
 80a066e:	f000 f93d 	bl	80a08ec <_ZN17Adafruit_NeoPixel4showEv>
    accelerometer.begin();                   // Setup SPI protocol, issue device soft reset
 80a0672:	4620      	mov	r0, r4
 80a0674:	f001 fab1 	bl	80a1bda <_ZN7ADXL3625beginEv>
    accelerometer.beginMeasure();            // Switch ADXL362 to measure mode
 80a0678:	4620      	mov	r0, r4
 80a067a:	f001 fa9c 	bl	80a1bb6 <_ZN7ADXL36212beginMeasureEv>
    // Uncomment to enable diagnostic info
    // accelerometer.checkAllControlRegs();     // Burst Read all Control Registers, to check for proper setup

    pinMode(b1, INPUT_PULLUP);
 80a067e:	4b0d      	ldr	r3, [pc, #52]	; (80a06b4 <_ZN14InternetButton5beginEv+0x54>)
 80a0680:	2102      	movs	r1, #2
 80a0682:	7818      	ldrb	r0, [r3, #0]
 80a0684:	f002 fcd6 	bl	80a3034 <pinMode>
    pinMode(b2, INPUT_PULLUP);
 80a0688:	4b0b      	ldr	r3, [pc, #44]	; (80a06b8 <_ZN14InternetButton5beginEv+0x58>)
 80a068a:	2102      	movs	r1, #2
 80a068c:	7818      	ldrb	r0, [r3, #0]
 80a068e:	f002 fcd1 	bl	80a3034 <pinMode>
    pinMode(b3, INPUT_PULLUP);
 80a0692:	4b0a      	ldr	r3, [pc, #40]	; (80a06bc <_ZN14InternetButton5beginEv+0x5c>)
 80a0694:	2102      	movs	r1, #2
 80a0696:	7818      	ldrb	r0, [r3, #0]
 80a0698:	f002 fccc 	bl	80a3034 <pinMode>
    pinMode(b4, INPUT_PULLUP);
}
 80a069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pinMode(b4, INPUT_PULLUP);
 80a06a0:	4b07      	ldr	r3, [pc, #28]	; (80a06c0 <_ZN14InternetButton5beginEv+0x60>)
 80a06a2:	2102      	movs	r1, #2
 80a06a4:	7818      	ldrb	r0, [r3, #0]
 80a06a6:	f002 bcc5 	b.w	80a3034 <pinMode>
 80a06aa:	bf00      	nop
 80a06ac:	20000084 	.word	0x20000084
 80a06b0:	20000080 	.word	0x20000080
 80a06b4:	20000004 	.word	0x20000004
 80a06b8:	20000005 	.word	0x20000005
 80a06bc:	20000006 	.word	0x20000006
 80a06c0:	20000007 	.word	0x20000007

080a06c4 <_ZN14InternetButton5ledOnEhhhh>:
 */
void InternetButton::setNumLeds(uint8_t i) {
    ring.updateLength(i);
}

void InternetButton::ledOn(uint8_t i, uint8_t r, uint8_t g, uint8_t b){
 80a06c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //i-1 shifts the location from human readable to the right index for the LEDs
    if(i == 12 && ring.getNumLeds() < 12){
 80a06c6:	290c      	cmp	r1, #12
void InternetButton::ledOn(uint8_t i, uint8_t r, uint8_t g, uint8_t b){
 80a06c8:	460c      	mov	r4, r1
 80a06ca:	4615      	mov	r5, r2
 80a06cc:	461e      	mov	r6, r3
 80a06ce:	f89d 7018 	ldrb.w	r7, [sp, #24]
    if(i == 12 && ring.getNumLeds() < 12){
 80a06d2:	d11d      	bne.n	80a0710 <_ZN14InternetButton5ledOnEhhhh+0x4c>
 80a06d4:	4814      	ldr	r0, [pc, #80]	; (80a0728 <_ZN14InternetButton5ledOnEhhhh+0x64>)
 80a06d6:	f001 fa04 	bl	80a1ae2 <_ZNK17Adafruit_NeoPixel10getNumLedsEv>
 80a06da:	280b      	cmp	r0, #11
 80a06dc:	d818      	bhi.n	80a0710 <_ZN14InternetButton5ledOnEhhhh+0x4c>
        ring.setPixelColor(0, ring.Color(r,g,b));
 80a06de:	463a      	mov	r2, r7
 80a06e0:	4631      	mov	r1, r6
 80a06e2:	4628      	mov	r0, r5
 80a06e4:	f001 f9f6 	bl	80a1ad4 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a06e8:	2100      	movs	r1, #0
 80a06ea:	4602      	mov	r2, r0
 80a06ec:	480e      	ldr	r0, [pc, #56]	; (80a0728 <_ZN14InternetButton5ledOnEhhhh+0x64>)
 80a06ee:	f001 f9ad 	bl	80a1a4c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        ring.setPixelColor(10, ring.Color(r,g,b));
 80a06f2:	463a      	mov	r2, r7
 80a06f4:	4631      	mov	r1, r6
 80a06f6:	4628      	mov	r0, r5
 80a06f8:	f001 f9ec 	bl	80a1ad4 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a06fc:	210a      	movs	r1, #10
 80a06fe:	4602      	mov	r2, r0
 80a0700:	4809      	ldr	r0, [pc, #36]	; (80a0728 <_ZN14InternetButton5ledOnEhhhh+0x64>)
 80a0702:	f001 f9a3 	bl	80a1a4c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    }
    else{
        ring.setPixelColor(i-1, ring.Color(r,g,b));
    }
    ring.show();
}
 80a0706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ring.show();
 80a070a:	4807      	ldr	r0, [pc, #28]	; (80a0728 <_ZN14InternetButton5ledOnEhhhh+0x64>)
 80a070c:	f000 b8ee 	b.w	80a08ec <_ZN17Adafruit_NeoPixel4showEv>
        ring.setPixelColor(i-1, ring.Color(r,g,b));
 80a0710:	463a      	mov	r2, r7
 80a0712:	4631      	mov	r1, r6
 80a0714:	4628      	mov	r0, r5
 80a0716:	f001 f9dd 	bl	80a1ad4 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a071a:	1e61      	subs	r1, r4, #1
 80a071c:	4602      	mov	r2, r0
 80a071e:	b289      	uxth	r1, r1
 80a0720:	4801      	ldr	r0, [pc, #4]	; (80a0728 <_ZN14InternetButton5ledOnEhhhh+0x64>)
 80a0722:	f001 f993 	bl	80a1a4c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a0726:	e7ee      	b.n	80a0706 <_ZN14InternetButton5ledOnEhhhh+0x42>
 80a0728:	20000084 	.word	0x20000084

080a072c <_ZN14InternetButton10allLedsOffEv>:

void InternetButton::ledOff(uint8_t i){
    ledOn(i,0,0,0);
}

void InternetButton::allLedsOff(){
 80a072c:	b510      	push	{r4, lr}
    for(int i = 0; i<PIXEL_COUNT; i++){
 80a072e:	2400      	movs	r4, #0
            ring.setPixelColor(i, ring.Color(0, 0, 0));
 80a0730:	2200      	movs	r2, #0
 80a0732:	4611      	mov	r1, r2
 80a0734:	4610      	mov	r0, r2
 80a0736:	f001 f9cd 	bl	80a1ad4 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a073a:	b2a1      	uxth	r1, r4
 80a073c:	4602      	mov	r2, r0
    for(int i = 0; i<PIXEL_COUNT; i++){
 80a073e:	3401      	adds	r4, #1
            ring.setPixelColor(i, ring.Color(0, 0, 0));
 80a0740:	4804      	ldr	r0, [pc, #16]	; (80a0754 <_ZN14InternetButton10allLedsOffEv+0x28>)
 80a0742:	f001 f983 	bl	80a1a4c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(int i = 0; i<PIXEL_COUNT; i++){
 80a0746:	2c0b      	cmp	r4, #11
 80a0748:	d1f2      	bne.n	80a0730 <_ZN14InternetButton10allLedsOffEv+0x4>
    }
    ring.show();
 80a074a:	4802      	ldr	r0, [pc, #8]	; (80a0754 <_ZN14InternetButton10allLedsOffEv+0x28>)
}
 80a074c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ring.show();
 80a0750:	f000 b8cc 	b.w	80a08ec <_ZN17Adafruit_NeoPixel4showEv>
 80a0754:	20000084 	.word	0x20000084

080a0758 <_ZN14InternetButton8buttonOnEh>:
    }
    ring.show();
}

uint8_t InternetButton::buttonOn(uint8_t i){
    if(b1 == 4){
 80a0758:	4608      	mov	r0, r1
uint8_t InternetButton::buttonOn(uint8_t i){
 80a075a:	b508      	push	{r3, lr}
    if(b1 == 4){
 80a075c:	4b05      	ldr	r3, [pc, #20]	; (80a0774 <_ZN14InternetButton8buttonOnEh+0x1c>)
 80a075e:	781b      	ldrb	r3, [r3, #0]
 80a0760:	2b04      	cmp	r3, #4
        return !digitalRead(i+3);
 80a0762:	bf08      	it	eq
 80a0764:	3003      	addeq	r0, #3
    }
    else {
        return !digitalRead(i);
 80a0766:	f002 fc8f 	bl	80a3088 <digitalRead>
 80a076a:	fab0 f080 	clz	r0, r0
 80a076e:	0940      	lsrs	r0, r0, #5
    }
}
 80a0770:	bd08      	pop	{r3, pc}
 80a0772:	bf00      	nop
 80a0774:	20000004 	.word	0x20000004

080a0778 <_ZN14InternetButton5wheelEh>:
        return 0;
    }
}

uint32_t InternetButton::wheel(uint8_t WheelPos) {
  if(WheelPos < 85) {
 80a0778:	2954      	cmp	r1, #84	; 0x54
 80a077a:	d809      	bhi.n	80a0790 <_ZN14InternetButton5wheelEh+0x18>
   return ring.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 80a077c:	eba1 0381 	sub.w	r3, r1, r1, lsl #2
 80a0780:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a0784:	3b01      	subs	r3, #1
 80a0786:	2200      	movs	r2, #0
 80a0788:	b2d9      	uxtb	r1, r3
 80a078a:	b2c0      	uxtb	r0, r0
 80a078c:	f001 b9a2 	b.w	80a1ad4 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else if(WheelPos < 170) {
 80a0790:	29a9      	cmp	r1, #169	; 0xa9
 80a0792:	d80b      	bhi.n	80a07ac <_ZN14InternetButton5wheelEh+0x34>
   WheelPos -= 85;
 80a0794:	3955      	subs	r1, #85	; 0x55
 80a0796:	b2c9      	uxtb	r1, r1
   return ring.Color(255 - WheelPos * 3, 0, WheelPos * 3);
 80a0798:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80a079c:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 80a07a0:	1e48      	subs	r0, r1, #1
 80a07a2:	b2d2      	uxtb	r2, r2
 80a07a4:	2100      	movs	r1, #0
 80a07a6:	b2c0      	uxtb	r0, r0
 80a07a8:	f001 b994 	b.w	80a1ad4 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else {
   WheelPos -= 170;
 80a07ac:	3156      	adds	r1, #86	; 0x56
 80a07ae:	b2c9      	uxtb	r1, r1
   return ring.Color(0, WheelPos * 3, 255 - WheelPos * 3);
 80a07b0:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 80a07b4:	3a01      	subs	r2, #1
 80a07b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a07ba:	2000      	movs	r0, #0
 80a07bc:	b2d2      	uxtb	r2, r2
 80a07be:	b2c9      	uxtb	r1, r1
 80a07c0:	f001 b988 	b.w	80a1ad4 <_ZN17Adafruit_NeoPixel5ColorEhhh>

080a07c4 <_ZN14InternetButton7rainbowEh>:
  }
}

void InternetButton::rainbow(uint8_t wait) {
 80a07c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a07c8:	4607      	mov	r7, r0
 80a07ca:	460e      	mov	r6, r1
    uint16_t i, j;

    for(j=0; j<256; j++) { // 1 cycle of all colors on wheel
 80a07cc:	2400      	movs	r4, #0
        for(i=0; i< 12; i++) {
            uint8_t idx = ((i * 256 / ring.numPixels()) + j) & 255;
 80a07ce:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80a0814 <_ZN14InternetButton7rainbowEh+0x50>
    for(j=0; j<256; j++) { // 1 cycle of all colors on wheel
 80a07d2:	2500      	movs	r5, #0
            uint8_t idx = ((i * 256 / ring.numPixels()) + j) & 255;
 80a07d4:	480f      	ldr	r0, [pc, #60]	; (80a0814 <_ZN14InternetButton7rainbowEh+0x50>)
 80a07d6:	f001 f982 	bl	80a1ade <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a07da:	022b      	lsls	r3, r5, #8
 80a07dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80a07e0:	4423      	add	r3, r4
            ring.setPixelColor(i, wheel(idx));
 80a07e2:	b2d9      	uxtb	r1, r3
 80a07e4:	4638      	mov	r0, r7
 80a07e6:	f7ff ffc7 	bl	80a0778 <_ZN14InternetButton5wheelEh>
 80a07ea:	b2a9      	uxth	r1, r5
 80a07ec:	4602      	mov	r2, r0
 80a07ee:	3501      	adds	r5, #1
 80a07f0:	4808      	ldr	r0, [pc, #32]	; (80a0814 <_ZN14InternetButton7rainbowEh+0x50>)
 80a07f2:	f001 f92b 	bl	80a1a4c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for(i=0; i< 12; i++) {
 80a07f6:	2d0c      	cmp	r5, #12
 80a07f8:	d1ec      	bne.n	80a07d4 <_ZN14InternetButton7rainbowEh+0x10>
        }
        ring.show();
 80a07fa:	4640      	mov	r0, r8
    for(j=0; j<256; j++) { // 1 cycle of all colors on wheel
 80a07fc:	3401      	adds	r4, #1
        ring.show();
 80a07fe:	f000 f875 	bl	80a08ec <_ZN17Adafruit_NeoPixel4showEv>
    for(j=0; j<256; j++) { // 1 cycle of all colors on wheel
 80a0802:	b2a4      	uxth	r4, r4
        delay(wait);
 80a0804:	4630      	mov	r0, r6
 80a0806:	f001 fd77 	bl	80a22f8 <delay>
    for(j=0; j<256; j++) { // 1 cycle of all colors on wheel
 80a080a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80a080e:	d1e0      	bne.n	80a07d2 <_ZN14InternetButton7rainbowEh+0xe>
    }
}
 80a0810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0814:	20000084 	.word	0x20000084

080a0818 <_GLOBAL__sub_I_pin>:
    // Serial.printlnf("%-3s o:%-2d f:%-5d d:%d", tempNote.c_str(), octave, int(freq), duration);

    if (octave != -1) tone(D0, int(freq), duration);
    delay(duration);
    if (octave != -1) noTone(D0);
}
 80a0818:	b510      	push	{r4, lr}
STARTUP(pinMode(pin, INPUT_PULLDOWN);)
 80a081a:	4c08      	ldr	r4, [pc, #32]	; (80a083c <_GLOBAL__sub_I_pin+0x24>)
 80a081c:	2103      	movs	r1, #3
 80a081e:	7820      	ldrb	r0, [r4, #0]
 80a0820:	f002 fc08 	bl	80a3034 <pinMode>
Adafruit_NeoPixel ring = Adafruit_NeoPixel(PIXEL_COUNT, pin, PIXEL_TYPE);
 80a0824:	210b      	movs	r1, #11
 80a0826:	7822      	ldrb	r2, [r4, #0]
 80a0828:	2302      	movs	r3, #2
 80a082a:	4805      	ldr	r0, [pc, #20]	; (80a0840 <_GLOBAL__sub_I_pin+0x28>)
 80a082c:	f000 f84d 	bl	80a08ca <_ZN17Adafruit_NeoPixelC1Ethh>
}
 80a0830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
ADXL362 accelerometer;
 80a0834:	210c      	movs	r1, #12
 80a0836:	4803      	ldr	r0, [pc, #12]	; (80a0844 <_GLOBAL__sub_I_pin+0x2c>)
 80a0838:	f001 b966 	b.w	80a1b08 <_ZN7ADXL362C1Ei>
 80a083c:	20000008 	.word	0x20000008
 80a0840:	20000084 	.word	0x20000084
 80a0844:	20000080 	.word	0x20000080

080a0848 <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0848:	b538      	push	{r3, r4, r5, lr}
 80a084a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a084c:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a084e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0850:	b108      	cbz	r0, 80a0856 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0852:	f001 fbdf 	bl	80a2014 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0856:	79a3      	ldrb	r3, [r4, #6]
 80a0858:	2b06      	cmp	r3, #6
 80a085a:	bf0c      	ite	eq
 80a085c:	2004      	moveq	r0, #4
 80a085e:	2003      	movne	r0, #3
 80a0860:	4368      	muls	r0, r5
 80a0862:	b280      	uxth	r0, r0
 80a0864:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0866:	f001 fbcd 	bl	80a2004 <malloc>
 80a086a:	60e0      	str	r0, [r4, #12]
 80a086c:	b128      	cbz	r0, 80a087a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a086e:	2100      	movs	r1, #0
 80a0870:	88a2      	ldrh	r2, [r4, #4]
 80a0872:	f002 fc84 	bl	80a317e <memset>
    numLEDs = n;
 80a0876:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a0878:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a087a:	80a0      	strh	r0, [r4, #4]
 80a087c:	8060      	strh	r0, [r4, #2]
}
 80a087e:	e7fb      	b.n	80a0878 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a0880 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a0880:	b510      	push	{r4, lr}
 80a0882:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0884:	2101      	movs	r1, #1
 80a0886:	79c0      	ldrb	r0, [r0, #7]
 80a0888:	f002 fbd4 	bl	80a3034 <pinMode>
  digitalWrite(pin, LOW);
 80a088c:	2100      	movs	r1, #0
 80a088e:	79e0      	ldrb	r0, [r4, #7]
 80a0890:	f002 fbe1 	bl	80a3056 <digitalWrite>
  begun = true;
 80a0894:	2301      	movs	r3, #1
 80a0896:	7023      	strb	r3, [r4, #0]
}
 80a0898:	bd10      	pop	{r4, pc}

080a089a <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a089a:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a089c:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a089e:	4605      	mov	r5, r0
 80a08a0:	460c      	mov	r4, r1
    if (begun) {
 80a08a2:	b11b      	cbz	r3, 80a08ac <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a08a4:	2100      	movs	r1, #0
 80a08a6:	79c0      	ldrb	r0, [r0, #7]
 80a08a8:	f002 fbc4 	bl	80a3034 <pinMode>
    }
    pin = p;
    if (begun) {
 80a08ac:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a08ae:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a08b0:	b153      	cbz	r3, 80a08c8 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a08b2:	b2a4      	uxth	r4, r4
 80a08b4:	4620      	mov	r0, r4
 80a08b6:	2101      	movs	r1, #1
 80a08b8:	f002 fbbc 	bl	80a3034 <pinMode>
        digitalWrite(p, LOW);
 80a08bc:	4620      	mov	r0, r4
    }
}
 80a08be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a08c2:	2100      	movs	r1, #0
 80a08c4:	f002 bbc7 	b.w	80a3056 <digitalWrite>
}
 80a08c8:	bd38      	pop	{r3, r4, r5, pc}

080a08ca <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a08ca:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a08cc:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a08ce:	4604      	mov	r4, r0
 80a08d0:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a08d2:	7183      	strb	r3, [r0, #6]
 80a08d4:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a08d8:	7005      	strb	r5, [r0, #0]
 80a08da:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a08dc:	f7ff ffb4 	bl	80a0848 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a08e0:	4620      	mov	r0, r4
 80a08e2:	4631      	mov	r1, r6
 80a08e4:	f7ff ffd9 	bl	80a089a <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a08e8:	4620      	mov	r0, r4
 80a08ea:	bd70      	pop	{r4, r5, r6, pc}

080a08ec <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a08ec:	68c3      	ldr	r3, [r0, #12]
 80a08ee:	2b00      	cmp	r3, #0
 80a08f0:	f000 8441 	beq.w	80a1176 <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a08f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a08f6:	7983      	ldrb	r3, [r0, #6]
 80a08f8:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a08fa:	3b02      	subs	r3, #2
 80a08fc:	b2db      	uxtb	r3, r3
 80a08fe:	2b04      	cmp	r3, #4
 80a0900:	bf8c      	ite	hi
 80a0902:	2532      	movhi	r5, #50	; 0x32
 80a0904:	4a28      	ldrls	r2, [pc, #160]	; (80a09a8 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a0906:	b087      	sub	sp, #28
 80a0908:	bf98      	it	ls
 80a090a:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a090e:	f001 f9b3 	bl	80a1c78 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0912:	6923      	ldr	r3, [r4, #16]
 80a0914:	1ac0      	subs	r0, r0, r3
 80a0916:	42a8      	cmp	r0, r5
 80a0918:	d3f9      	bcc.n	80a090e <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a091a:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a091c:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a091e:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0920:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0924:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0928:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a092a:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a092c:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a092e:	f000 826e 	beq.w	80a0e0e <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a0932:	2d07      	cmp	r5, #7
 80a0934:	f000 826b 	beq.w	80a0e0e <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0938:	2d06      	cmp	r5, #6
 80a093a:	f000 841d 	beq.w	80a1178 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a093e:	2d05      	cmp	r5, #5
 80a0940:	f000 83a1 	beq.w	80a1086 <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a0944:	2d08      	cmp	r5, #8
 80a0946:	f000 839e 	beq.w	80a1086 <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a094a:	2d00      	cmp	r5, #0
 80a094c:	f040 854f 	bne.w	80a13ee <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0950:	2b00      	cmp	r3, #0
 80a0952:	f000 8392 	beq.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0956:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a095a:	4a14      	ldr	r2, [pc, #80]	; (80a09ac <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a095c:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a095e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0962:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0964:	3b03      	subs	r3, #3
 80a0966:	b29b      	uxth	r3, r3
 80a0968:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a096c:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0970:	b2db      	uxtb	r3, r3
 80a0972:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0976:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a097a:	b2db      	uxtb	r3, r3
 80a097c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0980:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0984:	b2db      	uxtb	r3, r3
 80a0986:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a098a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a098e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0992:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0996:	021b      	lsls	r3, r3, #8
 80a0998:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a099c:	4303      	orrs	r3, r0
 80a099e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a09a0:	f88d 5005 	strb.w	r5, [sp, #5]
 80a09a4:	e11b      	b.n	80a0bde <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a09a6:	bf00      	nop
 80a09a8:	080a337c 	.word	0x080a337c
 80a09ac:	20000098 	.word	0x20000098
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09b0:	4600      	mov	r0, r0
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0ab8:	79e3      	ldrb	r3, [r4, #7]
 80a0aba:	6810      	ldr	r0, [r2, #0]
 80a0abc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ac0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ac4:	88bf      	ldrh	r7, [r7, #4]
 80a0ac6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0aca:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0acc:	4600      	mov	r0, r0
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0bc6:	9b04      	ldr	r3, [sp, #16]
 80a0bc8:	085b      	lsrs	r3, r3, #1
 80a0bca:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0bcc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0bd0:	3301      	adds	r3, #1
 80a0bd2:	b2db      	uxtb	r3, r3
 80a0bd4:	2b17      	cmp	r3, #23
 80a0bd6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0bda:	f200 8727 	bhi.w	80a1a2c <_ZN17Adafruit_NeoPixel4showEv+0x1140>
        pinSet(pin, HIGH); // HIGH
 80a0bde:	79e3      	ldrb	r3, [r4, #7]
 80a0be0:	6810      	ldr	r0, [r2, #0]
 80a0be2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0be6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0bea:	88bf      	ldrh	r7, [r7, #4]
 80a0bec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0bf0:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0bf2:	9803      	ldr	r0, [sp, #12]
 80a0bf4:	9b04      	ldr	r3, [sp, #16]
 80a0bf6:	4218      	tst	r0, r3
 80a0bf8:	f47f aeda 	bne.w	80a09b0 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
            ::: "r0", "cc", "memory");
 80a0bfc:	4600      	mov	r0, r0
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0c4e:	79e3      	ldrb	r3, [r4, #7]
 80a0c50:	6810      	ldr	r0, [r2, #0]
 80a0c52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c56:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c5a:	88bf      	ldrh	r7, [r7, #4]
 80a0c5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c60:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0c62:	4600      	mov	r0, r0
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	e6db      	b.n	80a0bc6 <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e0e:	2b00      	cmp	r3, #0
 80a0e10:	f000 8133 	beq.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0e14:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0e18:	2600      	movs	r6, #0
 80a0e1a:	4a13      	ldr	r2, [pc, #76]	; (80a0e68 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a0e1c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0e1e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a0e22:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0e24:	3b03      	subs	r3, #3
 80a0e26:	b29b      	uxth	r3, r3
 80a0e28:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0e2c:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0e30:	b2db      	uxtb	r3, r3
 80a0e32:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0e36:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0e3a:	b2db      	uxtb	r3, r3
 80a0e3c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0e40:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0e44:	b2db      	uxtb	r3, r3
 80a0e46:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0e4a:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0e52:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0e56:	021b      	lsls	r3, r3, #8
 80a0e58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0e5c:	4303      	orrs	r3, r0
 80a0e5e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0e60:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0e64:	e080      	b.n	80a0f68 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a0e66:	bf00      	nop
 80a0e68:	20000098 	.word	0x20000098
            ::: "r0", "cc", "memory");
 80a0e6c:	4600      	mov	r0, r0
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0f06:	79e3      	ldrb	r3, [r4, #7]
 80a0f08:	6810      	ldr	r0, [r2, #0]
 80a0f0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f0e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f12:	88bf      	ldrh	r7, [r7, #4]
 80a0f14:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f18:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0f1a:	4600      	mov	r0, r0
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
        mask >>= 1;
 80a0f50:	9b04      	ldr	r3, [sp, #16]
 80a0f52:	085b      	lsrs	r3, r3, #1
 80a0f54:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0f56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f5a:	3301      	adds	r3, #1
 80a0f5c:	b2db      	uxtb	r3, r3
 80a0f5e:	2b17      	cmp	r3, #23
 80a0f60:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0f64:	f200 8083 	bhi.w	80a106e <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a0f68:	79e3      	ldrb	r3, [r4, #7]
 80a0f6a:	6810      	ldr	r0, [r2, #0]
 80a0f6c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f70:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f74:	88bf      	ldrh	r7, [r7, #4]
 80a0f76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f7a:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0f7c:	9803      	ldr	r0, [sp, #12]
 80a0f7e:	9b04      	ldr	r3, [sp, #16]
 80a0f80:	4218      	tst	r0, r3
 80a0f82:	f47f af73 	bne.w	80a0e6c <_ZN17Adafruit_NeoPixel4showEv+0x580>
            ::: "r0", "cc", "memory");
 80a0f86:	4600      	mov	r0, r0
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0fae:	79e3      	ldrb	r3, [r4, #7]
 80a0fb0:	6810      	ldr	r0, [r2, #0]
 80a0fb2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fb6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0fba:	88bf      	ldrh	r7, [r7, #4]
 80a0fbc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0fc0:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a0fc2:	4600      	mov	r0, r0
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	e770      	b.n	80a0f50 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a106e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1072:	b29b      	uxth	r3, r3
 80a1074:	2b00      	cmp	r3, #0
 80a1076:	f47f aed1 	bne.w	80a0e1c <_ZN17Adafruit_NeoPixel4showEv+0x530>
  __ASM volatile ("cpsie i");
 80a107a:	b662      	cpsie	i
 80a107c:	f000 fdfc 	bl	80a1c78 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a1080:	6120      	str	r0, [r4, #16]
}
 80a1082:	b007      	add	sp, #28
 80a1084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1086:	2b00      	cmp	r3, #0
 80a1088:	d0f7      	beq.n	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a108a:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a108e:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a1090:	4b54      	ldr	r3, [pc, #336]	; (80a11e4 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a1092:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a1094:	4b54      	ldr	r3, [pc, #336]	; (80a11e8 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a1096:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a109a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a109e:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a10a0:	3a03      	subs	r2, #3
 80a10a2:	b292      	uxth	r2, r2
 80a10a4:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a10a8:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a10ac:	b2d2      	uxtb	r2, r2
 80a10ae:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a10b2:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a10b6:	b2d2      	uxtb	r2, r2
 80a10b8:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a10bc:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a10c0:	b2d2      	uxtb	r2, r2
 80a10c2:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a10c6:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a10ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a10ce:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a10d2:	0212      	lsls	r2, r2, #8
 80a10d4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a10d8:	433a      	orrs	r2, r7
 80a10da:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a10dc:	f88d 6005 	strb.w	r6, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a10e0:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a10e2:	685d      	ldr	r5, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a10e4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a10e8:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a10ec:	88bf      	ldrh	r7, [r7, #4]
 80a10ee:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a10f2:	9505      	str	r5, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a10f4:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a10f6:	9f03      	ldr	r7, [sp, #12]
 80a10f8:	9a04      	ldr	r2, [sp, #16]
 80a10fa:	4217      	tst	r7, r2
 80a10fc:	d025      	beq.n	80a114a <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a10fe:	685a      	ldr	r2, [r3, #4]
 80a1100:	9f05      	ldr	r7, [sp, #20]
 80a1102:	1bd2      	subs	r2, r2, r7
 80a1104:	2a4f      	cmp	r2, #79	; 0x4f
 80a1106:	d9fa      	bls.n	80a10fe <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a1108:	79e2      	ldrb	r2, [r4, #7]
 80a110a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a110e:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a1112:	88bf      	ldrh	r7, [r7, #4]
 80a1114:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a1118:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a111a:	685a      	ldr	r2, [r3, #4]
 80a111c:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a111e:	685a      	ldr	r2, [r3, #4]
 80a1120:	9f05      	ldr	r7, [sp, #20]
 80a1122:	1bd2      	subs	r2, r2, r7
 80a1124:	2a07      	cmp	r2, #7
 80a1126:	d9fa      	bls.n	80a111e <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a1128:	9a04      	ldr	r2, [sp, #16]
 80a112a:	0852      	lsrs	r2, r2, #1
 80a112c:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a112e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1132:	3201      	adds	r2, #1
 80a1134:	b2d2      	uxtb	r2, r2
 80a1136:	2a17      	cmp	r2, #23
 80a1138:	f88d 2005 	strb.w	r2, [sp, #5]
 80a113c:	d9d0      	bls.n	80a10e0 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a113e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a1142:	b292      	uxth	r2, r2
 80a1144:	2a00      	cmp	r2, #0
 80a1146:	d1a6      	bne.n	80a1096 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a1148:	e797      	b.n	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a114a:	685a      	ldr	r2, [r3, #4]
 80a114c:	9f05      	ldr	r7, [sp, #20]
 80a114e:	1bd2      	subs	r2, r2, r7
 80a1150:	2a18      	cmp	r2, #24
 80a1152:	d9fa      	bls.n	80a114a <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a1154:	79e2      	ldrb	r2, [r4, #7]
 80a1156:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a115a:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a115e:	88bf      	ldrh	r7, [r7, #4]
 80a1160:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a1164:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1166:	685a      	ldr	r2, [r3, #4]
 80a1168:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a116a:	685a      	ldr	r2, [r3, #4]
 80a116c:	9f05      	ldr	r7, [sp, #20]
 80a116e:	1bd2      	subs	r2, r2, r7
 80a1170:	2a45      	cmp	r2, #69	; 0x45
 80a1172:	d9fa      	bls.n	80a116a <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a1174:	e7d8      	b.n	80a1128 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a1176:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1178:	2b00      	cmp	r3, #0
 80a117a:	f43f af7e 	beq.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a117e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a1182:	2600      	movs	r6, #0
 80a1184:	4a17      	ldr	r2, [pc, #92]	; (80a11e4 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a1186:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1188:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a118c:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a118e:	3b04      	subs	r3, #4
 80a1190:	b29b      	uxth	r3, r3
 80a1192:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1196:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a119a:	b2db      	uxtb	r3, r3
 80a119c:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a11a0:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a11a4:	b2db      	uxtb	r3, r3
 80a11a6:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a11aa:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a11ae:	b2db      	uxtb	r3, r3
 80a11b0:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a11b4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a11b8:	b2db      	uxtb	r3, r3
 80a11ba:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a11be:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a11c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a11c6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a11ca:	041b      	lsls	r3, r3, #16
 80a11cc:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a11d0:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80a11d4:	433b      	orrs	r3, r7
 80a11d6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a11da:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a11dc:	f88d 6005 	strb.w	r6, [sp, #5]
 80a11e0:	e07f      	b.n	80a12e2 <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a11e2:	bf00      	nop
 80a11e4:	20000098 	.word	0x20000098
 80a11e8:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a11ec:	4600      	mov	r0, r0
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a125a:	79e3      	ldrb	r3, [r4, #7]
 80a125c:	6810      	ldr	r0, [r2, #0]
 80a125e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1262:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1266:	88bf      	ldrh	r7, [r7, #4]
 80a1268:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a126c:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a126e:	4600      	mov	r0, r0
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
        mask >>= 1;
 80a12cc:	9b04      	ldr	r3, [sp, #16]
 80a12ce:	085b      	lsrs	r3, r3, #1
 80a12d0:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a12d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a12d6:	3301      	adds	r3, #1
 80a12d8:	b2db      	uxtb	r3, r3
 80a12da:	2b1f      	cmp	r3, #31
 80a12dc:	f88d 3005 	strb.w	r3, [sp, #5]
 80a12e0:	d87e      	bhi.n	80a13e0 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a12e2:	79e3      	ldrb	r3, [r4, #7]
 80a12e4:	6810      	ldr	r0, [r2, #0]
 80a12e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12ea:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12ee:	88bf      	ldrh	r7, [r7, #4]
 80a12f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12f4:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a12f6:	9803      	ldr	r0, [sp, #12]
 80a12f8:	9b04      	ldr	r3, [sp, #16]
 80a12fa:	4218      	tst	r0, r3
 80a12fc:	f47f af76 	bne.w	80a11ec <_ZN17Adafruit_NeoPixel4showEv+0x900>
            ::: "r0", "cc", "memory");
 80a1300:	4600      	mov	r0, r0
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1328:	79e3      	ldrb	r3, [r4, #7]
 80a132a:	6810      	ldr	r0, [r2, #0]
 80a132c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1330:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1334:	88bf      	ldrh	r7, [r7, #4]
 80a1336:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a133a:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a133c:	4600      	mov	r0, r0
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	e775      	b.n	80a12cc <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a13e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a13e4:	b29b      	uxth	r3, r3
 80a13e6:	2b00      	cmp	r3, #0
 80a13e8:	f47f aecd 	bne.w	80a1186 <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a13ec:	e645      	b.n	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a13ee:	2d03      	cmp	r5, #3
 80a13f0:	f000 812b 	beq.w	80a164a <_ZN17Adafruit_NeoPixel4showEv+0xd5e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a13f4:	2b00      	cmp	r3, #0
 80a13f6:	f43f ae40 	beq.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a13fa:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a13fe:	2600      	movs	r6, #0
 80a1400:	4a17      	ldr	r2, [pc, #92]	; (80a1460 <_ZN17Adafruit_NeoPixel4showEv+0xb74>)
      mask = 0x800000; // reset the mask
 80a1402:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1404:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a1408:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a140a:	3b03      	subs	r3, #3
 80a140c:	b29b      	uxth	r3, r3
 80a140e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1412:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a1414:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a1416:	b2db      	uxtb	r3, r3
 80a1418:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a141c:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a141e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a1422:	b2db      	uxtb	r3, r3
 80a1424:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1428:	788b      	ldrb	r3, [r1, #2]
      pinSet(pin, LOW); // LOW
 80a142a:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a142e:	b2db      	uxtb	r3, r3
 80a1430:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1434:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a1438:	f89d 3008 	ldrb.w	r3, [sp, #8]
      pinSet(pin, LOW); // LOW
 80a143c:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1440:	021b      	lsls	r3, r3, #8
 80a1442:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a1446:	f89d e006 	ldrb.w	lr, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a144a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a144e:	ea43 030e 	orr.w	r3, r3, lr
 80a1452:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a1454:	3103      	adds	r1, #3
      j = 0;        // reset the 24-bit counter
 80a1456:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a145a:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a145e:	e07c      	b.n	80a155a <_ZN17Adafruit_NeoPixel4showEv+0xc6e>
 80a1460:	20000098 	.word	0x20000098
          mask >>= 1; // Do this task during the long delay of this bit
 80a1464:	9b04      	ldr	r3, [sp, #16]
 80a1466:	085b      	lsrs	r3, r3, #1
 80a1468:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a146a:	4600      	mov	r0, r0
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a14f0:	79e0      	ldrb	r0, [r4, #7]
 80a14f2:	6817      	ldr	r7, [r2, #0]
          j++;
 80a14f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a14f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a14fc:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a1500:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1504:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a1508:	3301      	adds	r3, #1
 80a150a:	b2db      	uxtb	r3, r3
 80a150c:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1510:	f8a0 c018 	strh.w	ip, [r0, #24]
            ::: "r0", "cc", "memory");
 80a1514:	4600      	mov	r0, r0
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
          if(j==24) break;
 80a153e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1542:	2b18      	cmp	r3, #24
 80a1544:	d07a      	beq.n	80a163c <_ZN17Adafruit_NeoPixel4showEv+0xd50>
          pinSet(pin, LOW); // LOW
 80a1546:	79e3      	ldrb	r3, [r4, #7]
 80a1548:	6810      	ldr	r0, [r2, #0]
 80a154a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a154e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1552:	88bf      	ldrh	r7, [r7, #4]
 80a1554:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1558:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a155a:	9803      	ldr	r0, [sp, #12]
 80a155c:	9b04      	ldr	r3, [sp, #16]
 80a155e:	4218      	tst	r0, r3
 80a1560:	d180      	bne.n	80a1464 <_ZN17Adafruit_NeoPixel4showEv+0xb78>
            ::: "r0", "cc", "memory");
 80a1562:	4600      	mov	r0, r0
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a1584:	79e3      	ldrb	r3, [r4, #7]
 80a1586:	6810      	ldr	r0, [r2, #0]
 80a1588:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a158c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1590:	88bf      	ldrh	r7, [r7, #4]
 80a1592:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1596:	831f      	strh	r7, [r3, #24]
          j++;
 80a1598:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a159c:	3301      	adds	r3, #1
 80a159e:	b2db      	uxtb	r3, r3
 80a15a0:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a15a4:	9b04      	ldr	r3, [sp, #16]
 80a15a6:	085b      	lsrs	r3, r3, #1
 80a15a8:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a15aa:	4600      	mov	r0, r0
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
          if(j==24) break;
 80a1634:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1638:	2b18      	cmp	r3, #24
 80a163a:	d184      	bne.n	80a1546 <_ZN17Adafruit_NeoPixel4showEv+0xc5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a163c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1640:	b29b      	uxth	r3, r3
 80a1642:	2b00      	cmp	r3, #0
 80a1644:	f47f aedd 	bne.w	80a1402 <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a1648:	e517      	b.n	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a164a:	2b00      	cmp	r3, #0
 80a164c:	f43f ad15 	beq.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1650:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1654:	2600      	movs	r6, #0
 80a1656:	4a13      	ldr	r2, [pc, #76]	; (80a16a4 <_ZN17Adafruit_NeoPixel4showEv+0xdb8>)
      mask = 0x800000; // reset the mask
 80a1658:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a165a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a165e:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a1660:	3b03      	subs	r3, #3
 80a1662:	b29b      	uxth	r3, r3
 80a1664:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1668:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a166c:	b2db      	uxtb	r3, r3
 80a166e:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1672:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a1676:	b2db      	uxtb	r3, r3
 80a1678:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a167c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a1680:	b2db      	uxtb	r3, r3
 80a1682:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1686:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a168a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a168e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1692:	021b      	lsls	r3, r3, #8
 80a1694:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1698:	4303      	orrs	r3, r0
 80a169a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a169c:	f88d 6005 	strb.w	r6, [sp, #5]
 80a16a0:	e0e1      	b.n	80a1866 <_ZN17Adafruit_NeoPixel4showEv+0xf7a>
 80a16a2:	bf00      	nop
 80a16a4:	20000098 	.word	0x20000098
            ::: "r0", "cc", "memory");
 80a16a8:	4600      	mov	r0, r0
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a17ca:	79e3      	ldrb	r3, [r4, #7]
 80a17cc:	6810      	ldr	r0, [r2, #0]
 80a17ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a17d2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a17d6:	88bf      	ldrh	r7, [r7, #4]
 80a17d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a17dc:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a17de:	4600      	mov	r0, r0
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
        mask >>= 1;
 80a184e:	9b04      	ldr	r3, [sp, #16]
 80a1850:	085b      	lsrs	r3, r3, #1
 80a1852:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1854:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1858:	3301      	adds	r3, #1
 80a185a:	b2db      	uxtb	r3, r3
 80a185c:	2b17      	cmp	r3, #23
 80a185e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1862:	f200 80eb 	bhi.w	80a1a3c <_ZN17Adafruit_NeoPixel4showEv+0x1150>
        pinSet(pin, HIGH); // HIGH
 80a1866:	79e3      	ldrb	r3, [r4, #7]
 80a1868:	6810      	ldr	r0, [r2, #0]
 80a186a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a186e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1872:	88bf      	ldrh	r7, [r7, #4]
 80a1874:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1878:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a187a:	9803      	ldr	r0, [sp, #12]
 80a187c:	9b04      	ldr	r3, [sp, #16]
 80a187e:	4218      	tst	r0, r3
 80a1880:	f47f af12 	bne.w	80a16a8 <_ZN17Adafruit_NeoPixel4showEv+0xdbc>
            ::: "r0", "cc", "memory");
 80a1884:	4600      	mov	r0, r0
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1906:	79e3      	ldrb	r3, [r4, #7]
 80a1908:	6810      	ldr	r0, [r2, #0]
 80a190a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a190e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1912:	88bf      	ldrh	r7, [r7, #4]
 80a1914:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1918:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a191a:	4600      	mov	r0, r0
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	e710      	b.n	80a184e <_ZN17Adafruit_NeoPixel4showEv+0xf62>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1a2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a30:	b29b      	uxth	r3, r3
 80a1a32:	2b00      	cmp	r3, #0
 80a1a34:	f47e af92 	bne.w	80a095c <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a1a38:	f7ff bb1f 	b.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1a3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a40:	b29b      	uxth	r3, r3
 80a1a42:	2b00      	cmp	r3, #0
 80a1a44:	f47f ae08 	bne.w	80a1658 <_ZN17Adafruit_NeoPixel4showEv+0xd6c>
 80a1a48:	f7ff bb17 	b.w	80a107a <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a1a4c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1a4c:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1a50:	428b      	cmp	r3, r1
 80a1a52:	d926      	bls.n	80a1aa2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1a54:	7a05      	ldrb	r5, [r0, #8]
 80a1a56:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1a5a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1a5e:	b2d6      	uxtb	r6, r2
 80a1a60:	b13d      	cbz	r5, 80a1a72 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a1a62:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1a64:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1a66:	436e      	muls	r6, r5
      r = (r * brightness) >> 8;
 80a1a68:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1a6c:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1a70:	0a36      	lsrs	r6, r6, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1a72:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1a76:	68c7      	ldr	r7, [r0, #12]
 80a1a78:	f1bc 0f06 	cmp.w	ip, #6
 80a1a7c:	bf0c      	ite	eq
 80a1a7e:	2504      	moveq	r5, #4
 80a1a80:	2503      	movne	r5, #3
 80a1a82:	4369      	muls	r1, r5
 80a1a84:	f1ac 0c02 	sub.w	ip, ip, #2
 80a1a88:	187d      	adds	r5, r7, r1
    switch(type) {
 80a1a8a:	f1bc 0f06 	cmp.w	ip, #6
 80a1a8e:	d81d      	bhi.n	80a1acc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a1a90:	e8df f00c 	tbb	[pc, ip]
 80a1a94:	04081c04 	.word	0x04081c04
 80a1a98:	040f      	.short	0x040f
 80a1a9a:	04          	.byte	0x04
 80a1a9b:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1a9c:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1a9e:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1aa0:	70ae      	strb	r6, [r5, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
 80a1aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a1aa4:	2bfe      	cmp	r3, #254	; 0xfe
 80a1aa6:	bf28      	it	cs
 80a1aa8:	23fe      	movcs	r3, #254	; 0xfe
 80a1aaa:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1aac:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1aae:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1ab0:	e7f7      	b.n	80a1aa2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p++ = r;
 80a1ab2:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1ab4:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1ab6:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1ab8:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a1aba:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1abc:	b913      	cbnz	r3, 80a1ac4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a1abe:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1ac0:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1ac2:	e7ee      	b.n	80a1aa2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1ac4:	435a      	muls	r2, r3
 80a1ac6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1aca:	e7f9      	b.n	80a1ac0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a1acc:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1ace:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1ad0:	70ae      	strb	r6, [r5, #2]
}
 80a1ad2:	e7e6      	b.n	80a1aa2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>

080a1ad4 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1ad4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1ad8:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1adc:	4770      	bx	lr

080a1ade <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
 80a1ade:	8840      	ldrh	r0, [r0, #2]
 80a1ae0:	4770      	bx	lr

080a1ae2 <_ZNK17Adafruit_NeoPixel10getNumLedsEv>:
 80a1ae2:	8840      	ldrh	r0, [r0, #2]
 80a1ae4:	4770      	bx	lr
	...

080a1ae8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1ae8:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1aea:	f000 f895 	bl	80a1c18 <HAL_Pin_Map>
 80a1aee:	4b01      	ldr	r3, [pc, #4]	; (80a1af4 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a1af0:	6018      	str	r0, [r3, #0]
}
 80a1af2:	bd08      	pop	{r3, pc}
 80a1af4:	20000098 	.word	0x20000098

080a1af8 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1af8:	4b02      	ldr	r3, [pc, #8]	; (80a1b04 <__tcf_0+0xc>)
 80a1afa:	6898      	ldr	r0, [r3, #8]
 80a1afc:	b108      	cbz	r0, 80a1b02 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a1afe:	f000 b8d3 	b.w	80a1ca8 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1b02:	4770      	bx	lr
 80a1b04:	200000a0 	.word	0x200000a0

080a1b08 <_ZN7ADXL362C1Ei>:
#define XL362_FILTER_CTL    0x2C
#define XL362_POWER_CTL     0x2D
#define XL362_SELF_TEST     0x2E


ADXL362::ADXL362(int slaveSelectPin) : slaveSelectPin(uint16_t(slaveSelectPin)) {}
 80a1b08:	8041      	strh	r1, [r0, #2]
 80a1b0a:	4770      	bx	lr

080a1b0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a1b0c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a1b0e:	4d0b      	ldr	r5, [pc, #44]	; (80a1b3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 80a1b10:	7829      	ldrb	r1, [r5, #0]
 80a1b12:	f3bf 8f5b 	dmb	ish
 80a1b16:	f011 0401 	ands.w	r4, r1, #1
 80a1b1a:	d10d      	bne.n	80a1b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a1b1c:	4628      	mov	r0, r5
 80a1b1e:	f7fe fac0 	bl	80a00a2 <__cxa_guard_acquire>
 80a1b22:	b148      	cbz	r0, 80a1b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 80a1b24:	4621      	mov	r1, r4
 80a1b26:	4806      	ldr	r0, [pc, #24]	; (80a1b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a1b28:	f000 fa9f 	bl	80a206a <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1b2c:	4628      	mov	r0, r5
 80a1b2e:	f7fe fabd 	bl	80a00ac <__cxa_guard_release>
 80a1b32:	4804      	ldr	r0, [pc, #16]	; (80a1b44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1b34:	f001 fb0f 	bl	80a3156 <atexit>
        return instance;
    }
 80a1b38:	4801      	ldr	r0, [pc, #4]	; (80a1b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a1b3a:	bd38      	pop	{r3, r4, r5, pc}
 80a1b3c:	2000009c 	.word	0x2000009c
 80a1b40:	200000a0 	.word	0x200000a0
 80a1b44:	080a1af9 	.word	0x080a1af9

080a1b48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a1b48:	b510      	push	{r4, lr}
 80a1b4a:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a1b4c:	f7ff ffde 	bl	80a1b0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a1b50:	4621      	mov	r1, r4
    }
 80a1b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().transfer(data);
 80a1b56:	f000 bab3 	b.w	80a20c0 <_ZN8SPIClass8transferEh>

080a1b5a <_ZN7ADXL36218SPIreadOneRegisterEh>:
}

// Basic SPI routines to simplify code
// read and write one register

uint8_t ADXL362::SPIreadOneRegister(uint8_t regAddress){
 80a1b5a:	b538      	push	{r3, r4, r5, lr}
 80a1b5c:	460d      	mov	r5, r1
 80a1b5e:	4604      	mov	r4, r0
  uint8_t regValue = 0;

  digitalWrite(slaveSelectPin, LOW);
 80a1b60:	2100      	movs	r1, #0
 80a1b62:	8840      	ldrh	r0, [r0, #2]
 80a1b64:	f001 fa77 	bl	80a3056 <digitalWrite>
  SPI.transfer(0x0B);  // read instruction
 80a1b68:	200b      	movs	r0, #11
 80a1b6a:	f7ff ffed 	bl	80a1b48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  SPI.transfer(regAddress);
 80a1b6e:	4628      	mov	r0, r5
 80a1b70:	f7ff ffea 	bl	80a1b48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  regValue = SPI.transfer(0x00);
 80a1b74:	2000      	movs	r0, #0
 80a1b76:	f7ff ffe7 	bl	80a1b48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1b7a:	4605      	mov	r5, r0
  digitalWrite(slaveSelectPin, HIGH);
 80a1b7c:	2101      	movs	r1, #1
 80a1b7e:	8860      	ldrh	r0, [r4, #2]
 80a1b80:	f001 fa69 	bl	80a3056 <digitalWrite>

  return regValue;
}
 80a1b84:	4628      	mov	r0, r5
 80a1b86:	bd38      	pop	{r3, r4, r5, pc}

080a1b88 <_ZN7ADXL36219SPIwriteOneRegisterEhh>:

void ADXL362::SPIwriteOneRegister(uint8_t regAddress, uint8_t regValue){
 80a1b88:	b570      	push	{r4, r5, r6, lr}
 80a1b8a:	460e      	mov	r6, r1
 80a1b8c:	4615      	mov	r5, r2
 80a1b8e:	4604      	mov	r4, r0

  digitalWrite(slaveSelectPin, LOW);
 80a1b90:	2100      	movs	r1, #0
 80a1b92:	8840      	ldrh	r0, [r0, #2]
 80a1b94:	f001 fa5f 	bl	80a3056 <digitalWrite>
  SPI.transfer(0x0A);  // write instruction
 80a1b98:	200a      	movs	r0, #10
 80a1b9a:	f7ff ffd5 	bl	80a1b48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  SPI.transfer(regAddress);
 80a1b9e:	4630      	mov	r0, r6
 80a1ba0:	f7ff ffd2 	bl	80a1b48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  SPI.transfer(regValue);
 80a1ba4:	4628      	mov	r0, r5
 80a1ba6:	f7ff ffcf 	bl	80a1b48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
  digitalWrite(slaveSelectPin, HIGH);
 80a1baa:	8860      	ldrh	r0, [r4, #2]
 80a1bac:	2101      	movs	r1, #1
}
 80a1bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  digitalWrite(slaveSelectPin, HIGH);
 80a1bb2:	f001 ba50 	b.w	80a3056 <digitalWrite>

080a1bb6 <_ZN7ADXL36212beginMeasureEv>:
void ADXL362::beginMeasure() {
 80a1bb6:	b510      	push	{r4, lr}
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 80a1bb8:	212d      	movs	r1, #45	; 0x2d
void ADXL362::beginMeasure() {
 80a1bba:	4604      	mov	r4, r0
  uint8_t temp = SPIreadOneRegister(XL362_POWER_CTL); // read Reg 2D before modifying for measure mode
 80a1bbc:	f7ff ffcd 	bl	80a1b5a <_ZN7ADXL36218SPIreadOneRegisterEh>
  temp = (temp & 0b11111100) | XL362_POWER_FLAG_MEASURE_RUNING;     // turn on measurement bit in Reg XL362_POWER_CTL
 80a1bc0:	f000 02fc 	and.w	r2, r0, #252	; 0xfc
  SPIwriteOneRegister(XL362_POWER_CTL, temp); // Write to XL362_POWER_CTL, Measurement Mode
 80a1bc4:	212d      	movs	r1, #45	; 0x2d
 80a1bc6:	4620      	mov	r0, r4
 80a1bc8:	f042 0202 	orr.w	r2, r2, #2
 80a1bcc:	f7ff ffdc 	bl	80a1b88 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
}
 80a1bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 80a1bd4:	200a      	movs	r0, #10
 80a1bd6:	f000 bb8f 	b.w	80a22f8 <delay>

080a1bda <_ZN7ADXL3625beginEv>:
void ADXL362::begin() {
 80a1bda:	b510      	push	{r4, lr}
  pinMode(slaveSelectPin, OUTPUT);
 80a1bdc:	2101      	movs	r1, #1
void ADXL362::begin() {
 80a1bde:	4604      	mov	r4, r0
  pinMode(slaveSelectPin, OUTPUT);
 80a1be0:	8840      	ldrh	r0, [r0, #2]
 80a1be2:	f001 fa27 	bl	80a3034 <pinMode>
        instance().begin();
 80a1be6:	f7ff ff91 	bl	80a1b0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a1bea:	f000 fa4d 	bl	80a2088 <_ZN8SPIClass5beginEv>
        instance().setDataMode(mode);
 80a1bee:	f7ff ff8d 	bl	80a1b0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a1bf2:	2100      	movs	r1, #0
 80a1bf4:	f000 fa56 	bl	80a20a4 <_ZN8SPIClass11setDataModeEh>
  delay(500);
 80a1bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1bfc:	f000 fb7c 	bl	80a22f8 <delay>
  mgperLSB = 1;
 80a1c00:	2301      	movs	r3, #1
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 80a1c02:	4620      	mov	r0, r4
  mgperLSB = 1;
 80a1c04:	7023      	strb	r3, [r4, #0]
  SPIwriteOneRegister(XL362_SOFT_RESET, 0x52);  // Write to SOFT RESET, "R"
 80a1c06:	2252      	movs	r2, #82	; 0x52
 80a1c08:	211f      	movs	r1, #31
 80a1c0a:	f7ff ffbd 	bl	80a1b88 <_ZN7ADXL36219SPIwriteOneRegisterEhh>
 }
 80a1c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 80a1c12:	200a      	movs	r0, #10
 80a1c14:	f000 bb70 	b.w	80a22f8 <delay>

080a1c18 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1c18:	b508      	push	{r3, lr}
 80a1c1a:	4b02      	ldr	r3, [pc, #8]	; (80a1c24 <HAL_Pin_Map+0xc>)
 80a1c1c:	681b      	ldr	r3, [r3, #0]
 80a1c1e:	681b      	ldr	r3, [r3, #0]
 80a1c20:	9301      	str	r3, [sp, #4]
 80a1c22:	bd08      	pop	{r3, pc}
 80a1c24:	080601b0 	.word	0x080601b0

080a1c28 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1c28:	b508      	push	{r3, lr}
 80a1c2a:	4b02      	ldr	r3, [pc, #8]	; (80a1c34 <HAL_Pin_Mode+0xc>)
 80a1c2c:	681b      	ldr	r3, [r3, #0]
 80a1c2e:	689b      	ldr	r3, [r3, #8]
 80a1c30:	9301      	str	r3, [sp, #4]
 80a1c32:	bd08      	pop	{r3, pc}
 80a1c34:	080601b0 	.word	0x080601b0

080a1c38 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1c38:	b508      	push	{r3, lr}
 80a1c3a:	4b02      	ldr	r3, [pc, #8]	; (80a1c44 <HAL_Get_Pin_Mode+0xc>)
 80a1c3c:	681b      	ldr	r3, [r3, #0]
 80a1c3e:	68db      	ldr	r3, [r3, #12]
 80a1c40:	9301      	str	r3, [sp, #4]
 80a1c42:	bd08      	pop	{r3, pc}
 80a1c44:	080601b0 	.word	0x080601b0

080a1c48 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1c48:	b508      	push	{r3, lr}
 80a1c4a:	4b02      	ldr	r3, [pc, #8]	; (80a1c54 <HAL_GPIO_Write+0xc>)
 80a1c4c:	681b      	ldr	r3, [r3, #0]
 80a1c4e:	691b      	ldr	r3, [r3, #16]
 80a1c50:	9301      	str	r3, [sp, #4]
 80a1c52:	bd08      	pop	{r3, pc}
 80a1c54:	080601b0 	.word	0x080601b0

080a1c58 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1c58:	b508      	push	{r3, lr}
 80a1c5a:	4b02      	ldr	r3, [pc, #8]	; (80a1c64 <HAL_GPIO_Read+0xc>)
 80a1c5c:	681b      	ldr	r3, [r3, #0]
 80a1c5e:	695b      	ldr	r3, [r3, #20]
 80a1c60:	9301      	str	r3, [sp, #4]
 80a1c62:	bd08      	pop	{r3, pc}
 80a1c64:	080601b0 	.word	0x080601b0

080a1c68 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1c68:	b508      	push	{r3, lr}
 80a1c6a:	4b02      	ldr	r3, [pc, #8]	; (80a1c74 <HAL_RNG_GetRandomNumber+0xc>)
 80a1c6c:	681b      	ldr	r3, [r3, #0]
 80a1c6e:	685b      	ldr	r3, [r3, #4]
 80a1c70:	9301      	str	r3, [sp, #4]
 80a1c72:	bd08      	pop	{r3, pc}
 80a1c74:	0806019c 	.word	0x0806019c

080a1c78 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1c78:	b508      	push	{r3, lr}
 80a1c7a:	4b02      	ldr	r3, [pc, #8]	; (80a1c84 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1c7c:	681b      	ldr	r3, [r3, #0]
 80a1c7e:	691b      	ldr	r3, [r3, #16]
 80a1c80:	9301      	str	r3, [sp, #4]
 80a1c82:	bd08      	pop	{r3, pc}
 80a1c84:	0806019c 	.word	0x0806019c

080a1c88 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1c88:	b508      	push	{r3, lr}
 80a1c8a:	4b02      	ldr	r3, [pc, #8]	; (80a1c94 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1c8c:	681b      	ldr	r3, [r3, #0]
 80a1c8e:	695b      	ldr	r3, [r3, #20]
 80a1c90:	9301      	str	r3, [sp, #4]
 80a1c92:	bd08      	pop	{r3, pc}
 80a1c94:	0806019c 	.word	0x0806019c

080a1c98 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1c98:	b508      	push	{r3, lr}
 80a1c9a:	4b02      	ldr	r3, [pc, #8]	; (80a1ca4 <os_mutex_recursive_create+0xc>)
 80a1c9c:	681b      	ldr	r3, [r3, #0]
 80a1c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1ca0:	9301      	str	r3, [sp, #4]
 80a1ca2:	bd08      	pop	{r3, pc}
 80a1ca4:	080601d0 	.word	0x080601d0

080a1ca8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1ca8:	b508      	push	{r3, lr}
 80a1caa:	4b02      	ldr	r3, [pc, #8]	; (80a1cb4 <os_mutex_recursive_destroy+0xc>)
 80a1cac:	681b      	ldr	r3, [r3, #0]
 80a1cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1cb0:	9301      	str	r3, [sp, #4]
 80a1cb2:	bd08      	pop	{r3, pc}
 80a1cb4:	080601d0 	.word	0x080601d0

080a1cb8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a1cb8:	b508      	push	{r3, lr}
 80a1cba:	4b02      	ldr	r3, [pc, #8]	; (80a1cc4 <os_mutex_recursive_lock+0xc>)
 80a1cbc:	681b      	ldr	r3, [r3, #0]
 80a1cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1cc0:	9301      	str	r3, [sp, #4]
 80a1cc2:	bd08      	pop	{r3, pc}
 80a1cc4:	080601d0 	.word	0x080601d0

080a1cc8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a1cc8:	b508      	push	{r3, lr}
 80a1cca:	4b02      	ldr	r3, [pc, #8]	; (80a1cd4 <os_mutex_recursive_unlock+0xc>)
 80a1ccc:	681b      	ldr	r3, [r3, #0]
 80a1cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1cd0:	9301      	str	r3, [sp, #4]
 80a1cd2:	bd08      	pop	{r3, pc}
 80a1cd4:	080601d0 	.word	0x080601d0

080a1cd8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a1cd8:	b508      	push	{r3, lr}
 80a1cda:	4b02      	ldr	r3, [pc, #8]	; (80a1ce4 <hal_usart_init+0xc>)
 80a1cdc:	681b      	ldr	r3, [r3, #0]
 80a1cde:	699b      	ldr	r3, [r3, #24]
 80a1ce0:	9301      	str	r3, [sp, #4]
 80a1ce2:	bd08      	pop	{r3, pc}
 80a1ce4:	080601c4 	.word	0x080601c4

080a1ce8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1ce8:	b508      	push	{r3, lr}
 80a1cea:	4b02      	ldr	r3, [pc, #8]	; (80a1cf4 <hal_usart_write+0xc>)
 80a1cec:	681b      	ldr	r3, [r3, #0]
 80a1cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1cf0:	9301      	str	r3, [sp, #4]
 80a1cf2:	bd08      	pop	{r3, pc}
 80a1cf4:	080601c4 	.word	0x080601c4

080a1cf8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1cf8:	b508      	push	{r3, lr}
 80a1cfa:	4b02      	ldr	r3, [pc, #8]	; (80a1d04 <hal_usart_available+0xc>)
 80a1cfc:	681b      	ldr	r3, [r3, #0]
 80a1cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1d00:	9301      	str	r3, [sp, #4]
 80a1d02:	bd08      	pop	{r3, pc}
 80a1d04:	080601c4 	.word	0x080601c4

080a1d08 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1d08:	b508      	push	{r3, lr}
 80a1d0a:	4b02      	ldr	r3, [pc, #8]	; (80a1d14 <hal_usart_read+0xc>)
 80a1d0c:	681b      	ldr	r3, [r3, #0]
 80a1d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1d10:	9301      	str	r3, [sp, #4]
 80a1d12:	bd08      	pop	{r3, pc}
 80a1d14:	080601c4 	.word	0x080601c4

080a1d18 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1d18:	b508      	push	{r3, lr}
 80a1d1a:	4b02      	ldr	r3, [pc, #8]	; (80a1d24 <hal_usart_peek+0xc>)
 80a1d1c:	681b      	ldr	r3, [r3, #0]
 80a1d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d20:	9301      	str	r3, [sp, #4]
 80a1d22:	bd08      	pop	{r3, pc}
 80a1d24:	080601c4 	.word	0x080601c4

080a1d28 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1d28:	b508      	push	{r3, lr}
 80a1d2a:	4b02      	ldr	r3, [pc, #8]	; (80a1d34 <hal_usart_flush+0xc>)
 80a1d2c:	681b      	ldr	r3, [r3, #0]
 80a1d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1d30:	9301      	str	r3, [sp, #4]
 80a1d32:	bd08      	pop	{r3, pc}
 80a1d34:	080601c4 	.word	0x080601c4

080a1d38 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1d38:	b508      	push	{r3, lr}
 80a1d3a:	4b02      	ldr	r3, [pc, #8]	; (80a1d44 <hal_usart_is_enabled+0xc>)
 80a1d3c:	681b      	ldr	r3, [r3, #0]
 80a1d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1d40:	9301      	str	r3, [sp, #4]
 80a1d42:	bd08      	pop	{r3, pc}
 80a1d44:	080601c4 	.word	0x080601c4

080a1d48 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1d48:	b508      	push	{r3, lr}
 80a1d4a:	4b02      	ldr	r3, [pc, #8]	; (80a1d54 <hal_usart_available_data_for_write+0xc>)
 80a1d4c:	681b      	ldr	r3, [r3, #0]
 80a1d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1d50:	9301      	str	r3, [sp, #4]
 80a1d52:	bd08      	pop	{r3, pc}
 80a1d54:	080601c4 	.word	0x080601c4

080a1d58 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1d58:	b508      	push	{r3, lr}
 80a1d5a:	4b02      	ldr	r3, [pc, #8]	; (80a1d64 <hal_i2c_write+0xc>)
 80a1d5c:	681b      	ldr	r3, [r3, #0]
 80a1d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1d60:	9301      	str	r3, [sp, #4]
 80a1d62:	bd08      	pop	{r3, pc}
 80a1d64:	080601ac 	.word	0x080601ac

080a1d68 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1d68:	b508      	push	{r3, lr}
 80a1d6a:	4b02      	ldr	r3, [pc, #8]	; (80a1d74 <hal_i2c_available+0xc>)
 80a1d6c:	681b      	ldr	r3, [r3, #0]
 80a1d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1d70:	9301      	str	r3, [sp, #4]
 80a1d72:	bd08      	pop	{r3, pc}
 80a1d74:	080601ac 	.word	0x080601ac

080a1d78 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1d78:	b508      	push	{r3, lr}
 80a1d7a:	4b02      	ldr	r3, [pc, #8]	; (80a1d84 <hal_i2c_read+0xc>)
 80a1d7c:	681b      	ldr	r3, [r3, #0]
 80a1d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1d80:	9301      	str	r3, [sp, #4]
 80a1d82:	bd08      	pop	{r3, pc}
 80a1d84:	080601ac 	.word	0x080601ac

080a1d88 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1d88:	b508      	push	{r3, lr}
 80a1d8a:	4b02      	ldr	r3, [pc, #8]	; (80a1d94 <hal_i2c_peek+0xc>)
 80a1d8c:	681b      	ldr	r3, [r3, #0]
 80a1d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1d90:	9301      	str	r3, [sp, #4]
 80a1d92:	bd08      	pop	{r3, pc}
 80a1d94:	080601ac 	.word	0x080601ac

080a1d98 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1d98:	b508      	push	{r3, lr}
 80a1d9a:	4b02      	ldr	r3, [pc, #8]	; (80a1da4 <hal_i2c_flush+0xc>)
 80a1d9c:	681b      	ldr	r3, [r3, #0]
 80a1d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1da0:	9301      	str	r3, [sp, #4]
 80a1da2:	bd08      	pop	{r3, pc}
 80a1da4:	080601ac 	.word	0x080601ac

080a1da8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1da8:	b508      	push	{r3, lr}
 80a1daa:	4b02      	ldr	r3, [pc, #8]	; (80a1db4 <hal_i2c_is_enabled+0xc>)
 80a1dac:	681b      	ldr	r3, [r3, #0]
 80a1dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1db0:	9301      	str	r3, [sp, #4]
 80a1db2:	bd08      	pop	{r3, pc}
 80a1db4:	080601ac 	.word	0x080601ac

080a1db8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1db8:	b508      	push	{r3, lr}
 80a1dba:	4b03      	ldr	r3, [pc, #12]	; (80a1dc8 <hal_i2c_init+0x10>)
 80a1dbc:	681b      	ldr	r3, [r3, #0]
 80a1dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1dc2:	9301      	str	r3, [sp, #4]
 80a1dc4:	bd08      	pop	{r3, pc}
 80a1dc6:	0000      	.short	0x0000
 80a1dc8:	080601ac 	.word	0x080601ac

080a1dcc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a1dcc:	b508      	push	{r3, lr}
 80a1dce:	4b02      	ldr	r3, [pc, #8]	; (80a1dd8 <hal_spi_begin+0xc>)
 80a1dd0:	681b      	ldr	r3, [r3, #0]
 80a1dd2:	681b      	ldr	r3, [r3, #0]
 80a1dd4:	9301      	str	r3, [sp, #4]
 80a1dd6:	bd08      	pop	{r3, pc}
 80a1dd8:	080601b4 	.word	0x080601b4

080a1ddc <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 80a1ddc:	b508      	push	{r3, lr}
 80a1dde:	4b02      	ldr	r3, [pc, #8]	; (80a1de8 <hal_spi_set_data_mode+0xc>)
 80a1de0:	681b      	ldr	r3, [r3, #0]
 80a1de2:	68db      	ldr	r3, [r3, #12]
 80a1de4:	9301      	str	r3, [sp, #4]
 80a1de6:	bd08      	pop	{r3, pc}
 80a1de8:	080601b4 	.word	0x080601b4

080a1dec <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a1dec:	b508      	push	{r3, lr}
 80a1dee:	4b02      	ldr	r3, [pc, #8]	; (80a1df8 <hal_spi_transfer+0xc>)
 80a1df0:	681b      	ldr	r3, [r3, #0]
 80a1df2:	695b      	ldr	r3, [r3, #20]
 80a1df4:	9301      	str	r3, [sp, #4]
 80a1df6:	bd08      	pop	{r3, pc}
 80a1df8:	080601b4 	.word	0x080601b4

080a1dfc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1dfc:	b508      	push	{r3, lr}
 80a1dfe:	4b02      	ldr	r3, [pc, #8]	; (80a1e08 <hal_spi_init+0xc>)
 80a1e00:	681b      	ldr	r3, [r3, #0]
 80a1e02:	69db      	ldr	r3, [r3, #28]
 80a1e04:	9301      	str	r3, [sp, #4]
 80a1e06:	bd08      	pop	{r3, pc}
 80a1e08:	080601b4 	.word	0x080601b4

080a1e0c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1e0c:	b508      	push	{r3, lr}
 80a1e0e:	4b02      	ldr	r3, [pc, #8]	; (80a1e18 <hal_spi_is_enabled+0xc>)
 80a1e10:	681b      	ldr	r3, [r3, #0]
 80a1e12:	6a1b      	ldr	r3, [r3, #32]
 80a1e14:	9301      	str	r3, [sp, #4]
 80a1e16:	bd08      	pop	{r3, pc}
 80a1e18:	080601b4 	.word	0x080601b4

080a1e1c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1e1c:	b508      	push	{r3, lr}
 80a1e1e:	4b02      	ldr	r3, [pc, #8]	; (80a1e28 <HAL_USB_USART_Init+0xc>)
 80a1e20:	681b      	ldr	r3, [r3, #0]
 80a1e22:	681b      	ldr	r3, [r3, #0]
 80a1e24:	9301      	str	r3, [sp, #4]
 80a1e26:	bd08      	pop	{r3, pc}
 80a1e28:	080601d8 	.word	0x080601d8

080a1e2c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1e2c:	b508      	push	{r3, lr}
 80a1e2e:	4b02      	ldr	r3, [pc, #8]	; (80a1e38 <HAL_USB_USART_Begin+0xc>)
 80a1e30:	681b      	ldr	r3, [r3, #0]
 80a1e32:	685b      	ldr	r3, [r3, #4]
 80a1e34:	9301      	str	r3, [sp, #4]
 80a1e36:	bd08      	pop	{r3, pc}
 80a1e38:	080601d8 	.word	0x080601d8

080a1e3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1e3c:	b508      	push	{r3, lr}
 80a1e3e:	4b02      	ldr	r3, [pc, #8]	; (80a1e48 <HAL_USB_USART_Available_Data+0xc>)
 80a1e40:	681b      	ldr	r3, [r3, #0]
 80a1e42:	691b      	ldr	r3, [r3, #16]
 80a1e44:	9301      	str	r3, [sp, #4]
 80a1e46:	bd08      	pop	{r3, pc}
 80a1e48:	080601d8 	.word	0x080601d8

080a1e4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1e4c:	b508      	push	{r3, lr}
 80a1e4e:	4b02      	ldr	r3, [pc, #8]	; (80a1e58 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1e50:	681b      	ldr	r3, [r3, #0]
 80a1e52:	695b      	ldr	r3, [r3, #20]
 80a1e54:	9301      	str	r3, [sp, #4]
 80a1e56:	bd08      	pop	{r3, pc}
 80a1e58:	080601d8 	.word	0x080601d8

080a1e5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1e5c:	b508      	push	{r3, lr}
 80a1e5e:	4b02      	ldr	r3, [pc, #8]	; (80a1e68 <HAL_USB_USART_Receive_Data+0xc>)
 80a1e60:	681b      	ldr	r3, [r3, #0]
 80a1e62:	699b      	ldr	r3, [r3, #24]
 80a1e64:	9301      	str	r3, [sp, #4]
 80a1e66:	bd08      	pop	{r3, pc}
 80a1e68:	080601d8 	.word	0x080601d8

080a1e6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1e6c:	b508      	push	{r3, lr}
 80a1e6e:	4b02      	ldr	r3, [pc, #8]	; (80a1e78 <HAL_USB_USART_Send_Data+0xc>)
 80a1e70:	681b      	ldr	r3, [r3, #0]
 80a1e72:	69db      	ldr	r3, [r3, #28]
 80a1e74:	9301      	str	r3, [sp, #4]
 80a1e76:	bd08      	pop	{r3, pc}
 80a1e78:	080601d8 	.word	0x080601d8

080a1e7c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1e7c:	b508      	push	{r3, lr}
 80a1e7e:	4b02      	ldr	r3, [pc, #8]	; (80a1e88 <HAL_USB_USART_Flush_Data+0xc>)
 80a1e80:	681b      	ldr	r3, [r3, #0]
 80a1e82:	6a1b      	ldr	r3, [r3, #32]
 80a1e84:	9301      	str	r3, [sp, #4]
 80a1e86:	bd08      	pop	{r3, pc}
 80a1e88:	080601d8 	.word	0x080601d8

080a1e8c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1e8c:	b508      	push	{r3, lr}
 80a1e8e:	4b02      	ldr	r3, [pc, #8]	; (80a1e98 <inet_gethostbyname+0xc>)
 80a1e90:	681b      	ldr	r3, [r3, #0]
 80a1e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1e94:	9301      	str	r3, [sp, #4]
 80a1e96:	bd08      	pop	{r3, pc}
 80a1e98:	080601c0 	.word	0x080601c0

080a1e9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1e9c:	b508      	push	{r3, lr}
 80a1e9e:	4b02      	ldr	r3, [pc, #8]	; (80a1ea8 <set_system_mode+0xc>)
 80a1ea0:	681b      	ldr	r3, [r3, #0]
 80a1ea2:	685b      	ldr	r3, [r3, #4]
 80a1ea4:	9301      	str	r3, [sp, #4]
 80a1ea6:	bd08      	pop	{r3, pc}
 80a1ea8:	080601a4 	.word	0x080601a4

080a1eac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1eac:	b508      	push	{r3, lr}
 80a1eae:	4b02      	ldr	r3, [pc, #8]	; (80a1eb8 <system_delay_ms+0xc>)
 80a1eb0:	681b      	ldr	r3, [r3, #0]
 80a1eb2:	695b      	ldr	r3, [r3, #20]
 80a1eb4:	9301      	str	r3, [sp, #4]
 80a1eb6:	bd08      	pop	{r3, pc}
 80a1eb8:	080601a4 	.word	0x080601a4

080a1ebc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1ebc:	b508      	push	{r3, lr}
 80a1ebe:	4b02      	ldr	r3, [pc, #8]	; (80a1ec8 <application_thread_current+0xc>)
 80a1ec0:	681b      	ldr	r3, [r3, #0]
 80a1ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1ec4:	9301      	str	r3, [sp, #4]
 80a1ec6:	bd08      	pop	{r3, pc}
 80a1ec8:	080601a4 	.word	0x080601a4

080a1ecc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1ecc:	b508      	push	{r3, lr}
 80a1ece:	4b02      	ldr	r3, [pc, #8]	; (80a1ed8 <application_thread_invoke+0xc>)
 80a1ed0:	681b      	ldr	r3, [r3, #0]
 80a1ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1ed4:	9301      	str	r3, [sp, #4]
 80a1ed6:	bd08      	pop	{r3, pc}
 80a1ed8:	080601a4 	.word	0x080601a4

080a1edc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1edc:	b508      	push	{r3, lr}
 80a1ede:	4b03      	ldr	r3, [pc, #12]	; (80a1eec <system_ctrl_set_app_request_handler+0x10>)
 80a1ee0:	681b      	ldr	r3, [r3, #0]
 80a1ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1ee6:	9301      	str	r3, [sp, #4]
 80a1ee8:	bd08      	pop	{r3, pc}
 80a1eea:	0000      	.short	0x0000
 80a1eec:	080601a4 	.word	0x080601a4

080a1ef0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1ef0:	b508      	push	{r3, lr}
 80a1ef2:	4b03      	ldr	r3, [pc, #12]	; (80a1f00 <system_ctrl_set_result+0x10>)
 80a1ef4:	681b      	ldr	r3, [r3, #0]
 80a1ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1efa:	9301      	str	r3, [sp, #4]
 80a1efc:	bd08      	pop	{r3, pc}
 80a1efe:	0000      	.short	0x0000
 80a1f00:	080601a4 	.word	0x080601a4

080a1f04 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f04:	b508      	push	{r3, lr}
 80a1f06:	4b02      	ldr	r3, [pc, #8]	; (80a1f10 <network_connect+0xc>)
 80a1f08:	681b      	ldr	r3, [r3, #0]
 80a1f0a:	685b      	ldr	r3, [r3, #4]
 80a1f0c:	9301      	str	r3, [sp, #4]
 80a1f0e:	bd08      	pop	{r3, pc}
 80a1f10:	080601c8 	.word	0x080601c8

080a1f14 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1f14:	b508      	push	{r3, lr}
 80a1f16:	4b02      	ldr	r3, [pc, #8]	; (80a1f20 <network_connecting+0xc>)
 80a1f18:	681b      	ldr	r3, [r3, #0]
 80a1f1a:	689b      	ldr	r3, [r3, #8]
 80a1f1c:	9301      	str	r3, [sp, #4]
 80a1f1e:	bd08      	pop	{r3, pc}
 80a1f20:	080601c8 	.word	0x080601c8

080a1f24 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1f24:	b508      	push	{r3, lr}
 80a1f26:	4b02      	ldr	r3, [pc, #8]	; (80a1f30 <network_disconnect+0xc>)
 80a1f28:	681b      	ldr	r3, [r3, #0]
 80a1f2a:	68db      	ldr	r3, [r3, #12]
 80a1f2c:	9301      	str	r3, [sp, #4]
 80a1f2e:	bd08      	pop	{r3, pc}
 80a1f30:	080601c8 	.word	0x080601c8

080a1f34 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1f34:	b508      	push	{r3, lr}
 80a1f36:	4b02      	ldr	r3, [pc, #8]	; (80a1f40 <network_ready+0xc>)
 80a1f38:	681b      	ldr	r3, [r3, #0]
 80a1f3a:	691b      	ldr	r3, [r3, #16]
 80a1f3c:	9301      	str	r3, [sp, #4]
 80a1f3e:	bd08      	pop	{r3, pc}
 80a1f40:	080601c8 	.word	0x080601c8

080a1f44 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f44:	b508      	push	{r3, lr}
 80a1f46:	4b02      	ldr	r3, [pc, #8]	; (80a1f50 <network_on+0xc>)
 80a1f48:	681b      	ldr	r3, [r3, #0]
 80a1f4a:	695b      	ldr	r3, [r3, #20]
 80a1f4c:	9301      	str	r3, [sp, #4]
 80a1f4e:	bd08      	pop	{r3, pc}
 80a1f50:	080601c8 	.word	0x080601c8

080a1f54 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f54:	b508      	push	{r3, lr}
 80a1f56:	4b02      	ldr	r3, [pc, #8]	; (80a1f60 <network_off+0xc>)
 80a1f58:	681b      	ldr	r3, [r3, #0]
 80a1f5a:	699b      	ldr	r3, [r3, #24]
 80a1f5c:	9301      	str	r3, [sp, #4]
 80a1f5e:	bd08      	pop	{r3, pc}
 80a1f60:	080601c8 	.word	0x080601c8

080a1f64 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1f64:	b508      	push	{r3, lr}
 80a1f66:	4b02      	ldr	r3, [pc, #8]	; (80a1f70 <network_listen+0xc>)
 80a1f68:	681b      	ldr	r3, [r3, #0]
 80a1f6a:	69db      	ldr	r3, [r3, #28]
 80a1f6c:	9301      	str	r3, [sp, #4]
 80a1f6e:	bd08      	pop	{r3, pc}
 80a1f70:	080601c8 	.word	0x080601c8

080a1f74 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1f74:	b508      	push	{r3, lr}
 80a1f76:	4b02      	ldr	r3, [pc, #8]	; (80a1f80 <network_listening+0xc>)
 80a1f78:	681b      	ldr	r3, [r3, #0]
 80a1f7a:	6a1b      	ldr	r3, [r3, #32]
 80a1f7c:	9301      	str	r3, [sp, #4]
 80a1f7e:	bd08      	pop	{r3, pc}
 80a1f80:	080601c8 	.word	0x080601c8

080a1f84 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1f84:	b508      	push	{r3, lr}
 80a1f86:	4b02      	ldr	r3, [pc, #8]	; (80a1f90 <network_set_listen_timeout+0xc>)
 80a1f88:	681b      	ldr	r3, [r3, #0]
 80a1f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1f8c:	9301      	str	r3, [sp, #4]
 80a1f8e:	bd08      	pop	{r3, pc}
 80a1f90:	080601c8 	.word	0x080601c8

080a1f94 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1f94:	b508      	push	{r3, lr}
 80a1f96:	4b02      	ldr	r3, [pc, #8]	; (80a1fa0 <network_get_listen_timeout+0xc>)
 80a1f98:	681b      	ldr	r3, [r3, #0]
 80a1f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1f9c:	9301      	str	r3, [sp, #4]
 80a1f9e:	bd08      	pop	{r3, pc}
 80a1fa0:	080601c8 	.word	0x080601c8

080a1fa4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1fa4:	b508      	push	{r3, lr}
 80a1fa6:	4b02      	ldr	r3, [pc, #8]	; (80a1fb0 <network_is_on+0xc>)
 80a1fa8:	681b      	ldr	r3, [r3, #0]
 80a1faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1fac:	9301      	str	r3, [sp, #4]
 80a1fae:	bd08      	pop	{r3, pc}
 80a1fb0:	080601c8 	.word	0x080601c8

080a1fb4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1fb4:	b508      	push	{r3, lr}
 80a1fb6:	4b02      	ldr	r3, [pc, #8]	; (80a1fc0 <network_is_off+0xc>)
 80a1fb8:	681b      	ldr	r3, [r3, #0]
 80a1fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1fbc:	9301      	str	r3, [sp, #4]
 80a1fbe:	bd08      	pop	{r3, pc}
 80a1fc0:	080601c8 	.word	0x080601c8

080a1fc4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1fc4:	b508      	push	{r3, lr}
 80a1fc6:	4b02      	ldr	r3, [pc, #8]	; (80a1fd0 <spark_function+0xc>)
 80a1fc8:	681b      	ldr	r3, [r3, #0]
 80a1fca:	685b      	ldr	r3, [r3, #4]
 80a1fcc:	9301      	str	r3, [sp, #4]
 80a1fce:	bd08      	pop	{r3, pc}
 80a1fd0:	080601cc 	.word	0x080601cc

080a1fd4 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1fd4:	b508      	push	{r3, lr}
 80a1fd6:	4b02      	ldr	r3, [pc, #8]	; (80a1fe0 <spark_cloud_flag_connected+0xc>)
 80a1fd8:	681b      	ldr	r3, [r3, #0]
 80a1fda:	695b      	ldr	r3, [r3, #20]
 80a1fdc:	9301      	str	r3, [sp, #4]
 80a1fde:	bd08      	pop	{r3, pc}
 80a1fe0:	080601cc 	.word	0x080601cc

080a1fe4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1fe4:	b508      	push	{r3, lr}
 80a1fe6:	4b02      	ldr	r3, [pc, #8]	; (80a1ff0 <spark_send_event+0xc>)
 80a1fe8:	681b      	ldr	r3, [r3, #0]
 80a1fea:	6a1b      	ldr	r3, [r3, #32]
 80a1fec:	9301      	str	r3, [sp, #4]
 80a1fee:	bd08      	pop	{r3, pc}
 80a1ff0:	080601cc 	.word	0x080601cc

080a1ff4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1ff4:	b508      	push	{r3, lr}
 80a1ff6:	4b02      	ldr	r3, [pc, #8]	; (80a2000 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1ff8:	681b      	ldr	r3, [r3, #0]
 80a1ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1ffc:	9301      	str	r3, [sp, #4]
 80a1ffe:	bd08      	pop	{r3, pc}
 80a2000:	080601cc 	.word	0x080601cc

080a2004 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2004:	b508      	push	{r3, lr}
 80a2006:	4b02      	ldr	r3, [pc, #8]	; (80a2010 <malloc+0xc>)
 80a2008:	681b      	ldr	r3, [r3, #0]
 80a200a:	681b      	ldr	r3, [r3, #0]
 80a200c:	9301      	str	r3, [sp, #4]
 80a200e:	bd08      	pop	{r3, pc}
 80a2010:	080601a0 	.word	0x080601a0

080a2014 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2014:	b508      	push	{r3, lr}
 80a2016:	4b02      	ldr	r3, [pc, #8]	; (80a2020 <free+0xc>)
 80a2018:	681b      	ldr	r3, [r3, #0]
 80a201a:	685b      	ldr	r3, [r3, #4]
 80a201c:	9301      	str	r3, [sp, #4]
 80a201e:	bd08      	pop	{r3, pc}
 80a2020:	080601a0 	.word	0x080601a0

080a2024 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2024:	b508      	push	{r3, lr}
 80a2026:	4b02      	ldr	r3, [pc, #8]	; (80a2030 <realloc+0xc>)
 80a2028:	681b      	ldr	r3, [r3, #0]
 80a202a:	689b      	ldr	r3, [r3, #8]
 80a202c:	9301      	str	r3, [sp, #4]
 80a202e:	bd08      	pop	{r3, pc}
 80a2030:	080601a0 	.word	0x080601a0

080a2034 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2034:	b508      	push	{r3, lr}
 80a2036:	4b02      	ldr	r3, [pc, #8]	; (80a2040 <abort+0xc>)
 80a2038:	681b      	ldr	r3, [r3, #0]
 80a203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a203c:	9301      	str	r3, [sp, #4]
 80a203e:	bd08      	pop	{r3, pc}
 80a2040:	080601a0 	.word	0x080601a0

080a2044 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2044:	b508      	push	{r3, lr}
 80a2046:	4b02      	ldr	r3, [pc, #8]	; (80a2050 <_malloc_r+0xc>)
 80a2048:	681b      	ldr	r3, [r3, #0]
 80a204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a204c:	9301      	str	r3, [sp, #4]
 80a204e:	bd08      	pop	{r3, pc}
 80a2050:	080601a0 	.word	0x080601a0

080a2054 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a2054:	b508      	push	{r3, lr}
 80a2056:	4b02      	ldr	r3, [pc, #8]	; (80a2060 <newlib_impure_ptr_callback+0xc>)
 80a2058:	681b      	ldr	r3, [r3, #0]
 80a205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a205c:	9301      	str	r3, [sp, #4]
 80a205e:	bd08      	pop	{r3, pc}
 80a2060:	080601a0 	.word	0x080601a0

080a2064 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2064:	6880      	ldr	r0, [r0, #8]
 80a2066:	f7ff be2f 	b.w	80a1cc8 <os_mutex_recursive_unlock>

080a206a <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a206a:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a206c:	2600      	movs	r6, #0
 80a206e:	4604      	mov	r4, r0
 80a2070:	460d      	mov	r5, r1
 80a2072:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a2076:	f7ff fe0f 	bl	80a1c98 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a207a:	4628      	mov	r0, r5
    _spi = spi;
 80a207c:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a207e:	f7ff febd 	bl	80a1dfc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2082:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2084:	6066      	str	r6, [r4, #4]
}
 80a2086:	bd70      	pop	{r4, r5, r6, pc}

080a2088 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a2088:	b510      	push	{r4, lr}
 80a208a:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a208c:	6880      	ldr	r0, [r0, #8]
 80a208e:	f7ff fe13 	bl	80a1cb8 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a2092:	7820      	ldrb	r0, [r4, #0]
 80a2094:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2098:	f7ff fe98 	bl	80a1dcc <hal_spi_begin>
        unlock();
 80a209c:	4620      	mov	r0, r4
 80a209e:	f7ff ffe1 	bl	80a2064 <_ZN8SPIClass6unlockEv>
    }
}
 80a20a2:	bd10      	pop	{r4, pc}

080a20a4 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 80a20a4:	b538      	push	{r3, r4, r5, lr}
 80a20a6:	4604      	mov	r4, r0
 80a20a8:	460d      	mov	r5, r1
 80a20aa:	6880      	ldr	r0, [r0, #8]
 80a20ac:	f7ff fe04 	bl	80a1cb8 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 80a20b0:	7820      	ldrb	r0, [r4, #0]
 80a20b2:	4629      	mov	r1, r5
 80a20b4:	f7ff fe92 	bl	80a1ddc <hal_spi_set_data_mode>
        unlock();
 80a20b8:	4620      	mov	r0, r4
 80a20ba:	f7ff ffd3 	bl	80a2064 <_ZN8SPIClass6unlockEv>
    }
}
 80a20be:	bd38      	pop	{r3, r4, r5, pc}

080a20c0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a20c0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a20c2:	7800      	ldrb	r0, [r0, #0]
 80a20c4:	f7ff fe92 	bl	80a1dec <hal_spi_transfer>
}
 80a20c8:	b2c0      	uxtb	r0, r0
 80a20ca:	bd08      	pop	{r3, pc}

080a20cc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a20cc:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a20ce:	2000      	movs	r0, #0
 80a20d0:	4b04      	ldr	r3, [pc, #16]	; (80a20e4 <_GLOBAL__sub_I_System+0x18>)
 80a20d2:	601a      	str	r2, [r3, #0]
 80a20d4:	4b04      	ldr	r3, [pc, #16]	; (80a20e8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a20d6:	4a05      	ldr	r2, [pc, #20]	; (80a20ec <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a20d8:	6018      	str	r0, [r3, #0]
 80a20da:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a20dc:	7198      	strb	r0, [r3, #6]
 80a20de:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a20e0:	f7ff bedc 	b.w	80a1e9c <set_system_mode>
 80a20e4:	200000b8 	.word	0x200000b8
 80a20e8:	200000ac 	.word	0x200000ac
 80a20ec:	ffff0000 	.word	0xffff0000

080a20f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a20f0:	b510      	push	{r4, lr}
 80a20f2:	4604      	mov	r4, r0
{
	free(buffer);
 80a20f4:	6800      	ldr	r0, [r0, #0]
 80a20f6:	f7ff ff8d 	bl	80a2014 <free>
}
 80a20fa:	4620      	mov	r0, r4
 80a20fc:	bd10      	pop	{r4, pc}

080a20fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a20fe:	b510      	push	{r4, lr}
 80a2100:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2102:	6800      	ldr	r0, [r0, #0]
 80a2104:	b108      	cbz	r0, 80a210a <_ZN6String10invalidateEv+0xc>
 80a2106:	f7ff ff85 	bl	80a2014 <free>
	buffer = NULL;
 80a210a:	2300      	movs	r3, #0
	capacity = len = 0;
 80a210c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a2110:	6023      	str	r3, [r4, #0]
}
 80a2112:	bd10      	pop	{r4, pc}

080a2114 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2114:	b538      	push	{r3, r4, r5, lr}
 80a2116:	4604      	mov	r4, r0
 80a2118:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a211a:	6800      	ldr	r0, [r0, #0]
 80a211c:	3101      	adds	r1, #1
 80a211e:	f7ff ff81 	bl	80a2024 <realloc>
	if (newbuffer) {
 80a2122:	b110      	cbz	r0, 80a212a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2124:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a2128:	2001      	movs	r0, #1
	}
	return 0;
}
 80a212a:	bd38      	pop	{r3, r4, r5, pc}

080a212c <_ZN6String7reserveEj>:
{
 80a212c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a212e:	6803      	ldr	r3, [r0, #0]
{
 80a2130:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2132:	b123      	cbz	r3, 80a213e <_ZN6String7reserveEj+0x12>
 80a2134:	6843      	ldr	r3, [r0, #4]
 80a2136:	428b      	cmp	r3, r1
 80a2138:	d301      	bcc.n	80a213e <_ZN6String7reserveEj+0x12>
 80a213a:	2001      	movs	r0, #1
}
 80a213c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a213e:	4620      	mov	r0, r4
 80a2140:	f7ff ffe8 	bl	80a2114 <_ZN6String12changeBufferEj>
 80a2144:	2800      	cmp	r0, #0
 80a2146:	d0f9      	beq.n	80a213c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a2148:	68a3      	ldr	r3, [r4, #8]
 80a214a:	2b00      	cmp	r3, #0
 80a214c:	d1f5      	bne.n	80a213a <_ZN6String7reserveEj+0xe>
 80a214e:	6822      	ldr	r2, [r4, #0]
 80a2150:	7013      	strb	r3, [r2, #0]
 80a2152:	e7f2      	b.n	80a213a <_ZN6String7reserveEj+0xe>

080a2154 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2154:	b570      	push	{r4, r5, r6, lr}
 80a2156:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2158:	4611      	mov	r1, r2
{
 80a215a:	4604      	mov	r4, r0
 80a215c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a215e:	f7ff ffe5 	bl	80a212c <_ZN6String7reserveEj>
 80a2162:	b920      	cbnz	r0, 80a216e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2164:	4620      	mov	r0, r4
 80a2166:	f7ff ffca 	bl	80a20fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a216a:	4620      	mov	r0, r4
 80a216c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a216e:	462a      	mov	r2, r5
 80a2170:	4631      	mov	r1, r6
 80a2172:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2174:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2176:	f000 fff4 	bl	80a3162 <memcpy>
	buffer[len] = 0;
 80a217a:	2100      	movs	r1, #0
 80a217c:	6822      	ldr	r2, [r4, #0]
 80a217e:	68a3      	ldr	r3, [r4, #8]
 80a2180:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2182:	e7f2      	b.n	80a216a <_ZN6String4copyEPKcj+0x16>

080a2184 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a2184:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a2186:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a2188:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a218a:	460d      	mov	r5, r1
	capacity = 0;
 80a218c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2190:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2192:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2194:	b139      	cbz	r1, 80a21a6 <_ZN6StringC1EPKc+0x22>
 80a2196:	4608      	mov	r0, r1
 80a2198:	f001 f843 	bl	80a3222 <strlen>
 80a219c:	4629      	mov	r1, r5
 80a219e:	4602      	mov	r2, r0
 80a21a0:	4620      	mov	r0, r4
 80a21a2:	f7ff ffd7 	bl	80a2154 <_ZN6String4copyEPKcj>
}
 80a21a6:	4620      	mov	r0, r4
 80a21a8:	bd38      	pop	{r3, r4, r5, pc}

080a21aa <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a21aa:	4288      	cmp	r0, r1
{
 80a21ac:	b510      	push	{r4, lr}
 80a21ae:	460b      	mov	r3, r1
 80a21b0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a21b2:	d004      	beq.n	80a21be <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a21b4:	6809      	ldr	r1, [r1, #0]
 80a21b6:	b121      	cbz	r1, 80a21c2 <_ZN6StringaSERKS_+0x18>
 80a21b8:	689a      	ldr	r2, [r3, #8]
 80a21ba:	f7ff ffcb 	bl	80a2154 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a21be:	4620      	mov	r0, r4
 80a21c0:	bd10      	pop	{r4, pc}
	else invalidate();
 80a21c2:	f7ff ff9c 	bl	80a20fe <_ZN6String10invalidateEv>
 80a21c6:	e7fa      	b.n	80a21be <_ZN6StringaSERKS_+0x14>

080a21c8 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a21c8:	2300      	movs	r3, #0
String::String(const String &value)
 80a21ca:	b510      	push	{r4, lr}
 80a21cc:	4604      	mov	r4, r0
	capacity = 0;
 80a21ce:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a21d2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a21d4:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a21d6:	f7ff ffe8 	bl	80a21aa <_ZN6StringaSERKS_>
}
 80a21da:	4620      	mov	r0, r4
 80a21dc:	bd10      	pop	{r4, pc}

080a21de <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a21de:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a21e0:	6882      	ldr	r2, [r0, #8]
 80a21e2:	b93a      	cbnz	r2, 80a21f4 <_ZNK6String6equalsEPKc+0x16>
 80a21e4:	b121      	cbz	r1, 80a21f0 <_ZNK6String6equalsEPKc+0x12>
 80a21e6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a21e8:	fab0 f080 	clz	r0, r0
 80a21ec:	0940      	lsrs	r0, r0, #5
 80a21ee:	e000      	b.n	80a21f2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a21f0:	2001      	movs	r0, #1
}
 80a21f2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a21f4:	6800      	ldr	r0, [r0, #0]
 80a21f6:	b909      	cbnz	r1, 80a21fc <_ZNK6String6equalsEPKc+0x1e>
 80a21f8:	7800      	ldrb	r0, [r0, #0]
 80a21fa:	e7f5      	b.n	80a21e8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a21fc:	f000 ffec 	bl	80a31d8 <strcmp>
 80a2200:	e7f2      	b.n	80a21e8 <_ZNK6String6equalsEPKc+0xa>

080a2202 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2204:	4606      	mov	r6, r0
 80a2206:	460d      	mov	r5, r1
  size_t n = 0;
 80a2208:	2400      	movs	r4, #0
 80a220a:	188f      	adds	r7, r1, r2
  while (size--) {
 80a220c:	42bd      	cmp	r5, r7
 80a220e:	d00c      	beq.n	80a222a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2210:	6833      	ldr	r3, [r6, #0]
 80a2212:	4630      	mov	r0, r6
 80a2214:	689b      	ldr	r3, [r3, #8]
 80a2216:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a221a:	4798      	blx	r3
     if (chunk>=0)
 80a221c:	1e03      	subs	r3, r0, #0
 80a221e:	db01      	blt.n	80a2224 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2220:	441c      	add	r4, r3
  while (size--) {
 80a2222:	e7f3      	b.n	80a220c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2224:	2c00      	cmp	r4, #0
 80a2226:	bf08      	it	eq
 80a2228:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a222a:	4620      	mov	r0, r4
 80a222c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a222e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a222e:	b570      	push	{r4, r5, r6, lr}
 80a2230:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2232:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2234:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2236:	b149      	cbz	r1, 80a224c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2238:	f000 fff3 	bl	80a3222 <strlen>
 80a223c:	682b      	ldr	r3, [r5, #0]
 80a223e:	4602      	mov	r2, r0
 80a2240:	4621      	mov	r1, r4
 80a2242:	4628      	mov	r0, r5
    }
 80a2244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2248:	68db      	ldr	r3, [r3, #12]
 80a224a:	4718      	bx	r3
    }
 80a224c:	bd70      	pop	{r4, r5, r6, pc}

080a224e <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a224e:	6803      	ldr	r3, [r0, #0]
 80a2250:	689b      	ldr	r3, [r3, #8]
 80a2252:	4718      	bx	r3

080a2254 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2254:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2256:	210d      	movs	r1, #13
{
 80a2258:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a225a:	f7ff fff8 	bl	80a224e <_ZN5Print5printEc>
  n += print('\n');
 80a225e:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a2260:	4604      	mov	r4, r0
  n += print('\n');
 80a2262:	4628      	mov	r0, r5
 80a2264:	f7ff fff3 	bl	80a224e <_ZN5Print5printEc>
  return n;
}
 80a2268:	4420      	add	r0, r4
 80a226a:	bd38      	pop	{r3, r4, r5, pc}

080a226c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a226c:	b538      	push	{r3, r4, r5, lr}
 80a226e:	4605      	mov	r5, r0
  return write(str);
 80a2270:	f7ff ffdd 	bl	80a222e <_ZN5Print5writeEPKc>
 80a2274:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2276:	4628      	mov	r0, r5
 80a2278:	f7ff ffec 	bl	80a2254 <_ZN5Print7printlnEv>
  return n;
}
 80a227c:	4420      	add	r0, r4
 80a227e:	bd38      	pop	{r3, r4, r5, pc}

080a2280 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2280:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2282:	2a01      	cmp	r2, #1
 80a2284:	bf98      	it	ls
 80a2286:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2288:	b530      	push	{r4, r5, lr}
 80a228a:	b08b      	sub	sp, #44	; 0x2c
 80a228c:	460c      	mov	r4, r1
  *str = '\0';
 80a228e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2292:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2294:	4625      	mov	r5, r4
 80a2296:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a229a:	fb04 5312 	mls	r3, r4, r2, r5
 80a229e:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a22a0:	2b09      	cmp	r3, #9
 80a22a2:	bf94      	ite	ls
 80a22a4:	3330      	addls	r3, #48	; 0x30
 80a22a6:	3337      	addhi	r3, #55	; 0x37
 80a22a8:	b2db      	uxtb	r3, r3
  } while(n);
 80a22aa:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a22ac:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a22b0:	d9f0      	bls.n	80a2294 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a22b2:	f7ff ffbc 	bl	80a222e <_ZN5Print5writeEPKc>
}
 80a22b6:	b00b      	add	sp, #44	; 0x2c
 80a22b8:	bd30      	pop	{r4, r5, pc}

080a22ba <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a22ba:	2300      	movs	r3, #0
 80a22bc:	6840      	ldr	r0, [r0, #4]
 80a22be:	461a      	mov	r2, r3
 80a22c0:	4619      	mov	r1, r3
 80a22c2:	f7ff be3f 	b.w	80a1f44 <network_on>

080a22c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a22c6:	680b      	ldr	r3, [r1, #0]
 80a22c8:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a22ca:	b113      	cbz	r3, 80a22d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a22cc:	685a      	ldr	r2, [r3, #4]
 80a22ce:	3201      	adds	r2, #1
 80a22d0:	605a      	str	r2, [r3, #4]
      }
 80a22d2:	4770      	bx	lr

080a22d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a22d4:	4b01      	ldr	r3, [pc, #4]	; (80a22dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a22d6:	4a02      	ldr	r2, [pc, #8]	; (80a22e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a22d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a22da:	4770      	bx	lr
 80a22dc:	200000bc 	.word	0x200000bc
 80a22e0:	080a3390 	.word	0x080a3390

080a22e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a22e4:	4b02      	ldr	r3, [pc, #8]	; (80a22f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a22e6:	681a      	ldr	r2, [r3, #0]
 80a22e8:	4b02      	ldr	r3, [pc, #8]	; (80a22f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a22ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a22ec:	4770      	bx	lr
 80a22ee:	bf00      	nop
 80a22f0:	2000000c 	.word	0x2000000c
 80a22f4:	200000c0 	.word	0x200000c0

080a22f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a22f8:	2100      	movs	r1, #0
 80a22fa:	f7ff bdd7 	b.w	80a1eac <system_delay_ms>

080a22fe <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a22fe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2300:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a2302:	4604      	mov	r4, r0
      if (_M_manager)
 80a2304:	b113      	cbz	r3, 80a230c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2306:	2203      	movs	r2, #3
 80a2308:	4601      	mov	r1, r0
 80a230a:	4798      	blx	r3
    }
 80a230c:	4620      	mov	r0, r4
 80a230e:	bd10      	pop	{r4, pc}

080a2310 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a2310:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2312:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a2314:	460b      	mov	r3, r1
 80a2316:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2318:	c803      	ldmia	r0, {r0, r1}
 80a231a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a231e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2322:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2326:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a232a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a232e:	b002      	add	sp, #8
 80a2330:	bd10      	pop	{r4, pc}
	...

080a2334 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2334:	2200      	movs	r2, #0
 80a2336:	4b01      	ldr	r3, [pc, #4]	; (80a233c <_GLOBAL__sub_I_RGB+0x8>)
 80a2338:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a233a:	4770      	bx	lr
 80a233c:	200000c4 	.word	0x200000c4

080a2340 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2340:	4b01      	ldr	r3, [pc, #4]	; (80a2348 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2342:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2344:	4770      	bx	lr
 80a2346:	bf00      	nop
 80a2348:	20000010 	.word	0x20000010

080a234c <serialEventRun>:
{
 80a234c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a234e:	4b13      	ldr	r3, [pc, #76]	; (80a239c <serialEventRun+0x50>)
 80a2350:	b143      	cbz	r3, 80a2364 <serialEventRun+0x18>
 80a2352:	f000 fc2b 	bl	80a2bac <_Z16_fetch_usbserialv>
 80a2356:	6803      	ldr	r3, [r0, #0]
 80a2358:	691b      	ldr	r3, [r3, #16]
 80a235a:	4798      	blx	r3
 80a235c:	2800      	cmp	r0, #0
 80a235e:	dd01      	ble.n	80a2364 <serialEventRun+0x18>
        serialEvent();
 80a2360:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2364:	4b0e      	ldr	r3, [pc, #56]	; (80a23a0 <serialEventRun+0x54>)
 80a2366:	b143      	cbz	r3, 80a237a <serialEventRun+0x2e>
 80a2368:	f000 fcc2 	bl	80a2cf0 <_Z22__fetch_global_Serial1v>
 80a236c:	6803      	ldr	r3, [r0, #0]
 80a236e:	691b      	ldr	r3, [r3, #16]
 80a2370:	4798      	blx	r3
 80a2372:	2800      	cmp	r0, #0
 80a2374:	dd01      	ble.n	80a237a <serialEventRun+0x2e>
        serialEvent1();
 80a2376:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a237a:	4b0a      	ldr	r3, [pc, #40]	; (80a23a4 <serialEventRun+0x58>)
 80a237c:	b10b      	cbz	r3, 80a2382 <serialEventRun+0x36>
 80a237e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2382:	4b09      	ldr	r3, [pc, #36]	; (80a23a8 <serialEventRun+0x5c>)
 80a2384:	b143      	cbz	r3, 80a2398 <serialEventRun+0x4c>
 80a2386:	f000 fc3d 	bl	80a2c04 <_Z17_fetch_usbserial1v>
 80a238a:	6803      	ldr	r3, [r0, #0]
 80a238c:	691b      	ldr	r3, [r3, #16]
 80a238e:	4798      	blx	r3
 80a2390:	2800      	cmp	r0, #0
 80a2392:	dd01      	ble.n	80a2398 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2394:	f3af 8000 	nop.w
}
 80a2398:	bd08      	pop	{r3, pc}
 80a239a:	bf00      	nop
	...

080a23ac <_post_loop>:
{
 80a23ac:	b508      	push	{r3, lr}
	serialEventRun();
 80a23ae:	f7ff ffcd 	bl	80a234c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a23b2:	f7ff fc69 	bl	80a1c88 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a23b6:	4b01      	ldr	r3, [pc, #4]	; (80a23bc <_post_loop+0x10>)
 80a23b8:	6018      	str	r0, [r3, #0]
}
 80a23ba:	bd08      	pop	{r3, pc}
 80a23bc:	2000013c 	.word	0x2000013c

080a23c0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a23c0:	4805      	ldr	r0, [pc, #20]	; (80a23d8 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a23c2:	4a06      	ldr	r2, [pc, #24]	; (80a23dc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a23c4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a23c6:	1a12      	subs	r2, r2, r0
 80a23c8:	4905      	ldr	r1, [pc, #20]	; (80a23e0 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a23ca:	f000 feca 	bl	80a3162 <memcpy>
    __backup_sram_signature = signature;
 80a23ce:	4b05      	ldr	r3, [pc, #20]	; (80a23e4 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a23d0:	4a05      	ldr	r2, [pc, #20]	; (80a23e8 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a23d2:	601a      	str	r2, [r3, #0]
}
 80a23d4:	bd08      	pop	{r3, pc}
 80a23d6:	bf00      	nop
 80a23d8:	40024000 	.word	0x40024000
 80a23dc:	40024004 	.word	0x40024004
 80a23e0:	080a3510 	.word	0x080a3510
 80a23e4:	40024000 	.word	0x40024000
 80a23e8:	9a271c1e 	.word	0x9a271c1e

080a23ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23ec:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a23ee:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23f0:	461a      	mov	r2, r3
 80a23f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a23f6:	9300      	str	r3, [sp, #0]
 80a23f8:	f7ff fd7a 	bl	80a1ef0 <system_ctrl_set_result>
}
 80a23fc:	b003      	add	sp, #12
 80a23fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2404 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2404:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2406:	8843      	ldrh	r3, [r0, #2]
 80a2408:	2b0a      	cmp	r3, #10
 80a240a:	d008      	beq.n	80a241e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a240c:	2b50      	cmp	r3, #80	; 0x50
 80a240e:	d10b      	bne.n	80a2428 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2410:	4b09      	ldr	r3, [pc, #36]	; (80a2438 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2412:	681b      	ldr	r3, [r3, #0]
 80a2414:	b14b      	cbz	r3, 80a242a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2416:	b003      	add	sp, #12
 80a2418:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a241c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a241e:	f7ff ffe5 	bl	80a23ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2422:	b003      	add	sp, #12
 80a2424:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2428:	2300      	movs	r3, #0
 80a242a:	461a      	mov	r2, r3
 80a242c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2430:	9300      	str	r3, [sp, #0]
 80a2432:	f7ff fd5d 	bl	80a1ef0 <system_ctrl_set_result>
}
 80a2436:	e7f4      	b.n	80a2422 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2438:	200000d8 	.word	0x200000d8

080a243c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a243c:	2100      	movs	r1, #0
{
 80a243e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2440:	4811      	ldr	r0, [pc, #68]	; (80a2488 <module_user_init_hook+0x4c>)
 80a2442:	f7ff fe07 	bl	80a2054 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a2446:	4b11      	ldr	r3, [pc, #68]	; (80a248c <module_user_init_hook+0x50>)
 80a2448:	681a      	ldr	r2, [r3, #0]
 80a244a:	4b11      	ldr	r3, [pc, #68]	; (80a2490 <module_user_init_hook+0x54>)
 80a244c:	429a      	cmp	r2, r3
 80a244e:	bf0c      	ite	eq
 80a2450:	2201      	moveq	r2, #1
 80a2452:	2200      	movne	r2, #0
 80a2454:	4b0f      	ldr	r3, [pc, #60]	; (80a2494 <module_user_init_hook+0x58>)
 80a2456:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2458:	d001      	beq.n	80a245e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a245a:	f7ff ffb1 	bl	80a23c0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a245e:	f7ff fc03 	bl	80a1c68 <HAL_RNG_GetRandomNumber>
 80a2462:	4604      	mov	r4, r0
    srand(seed);
 80a2464:	f000 fe94 	bl	80a3190 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2468:	4b0b      	ldr	r3, [pc, #44]	; (80a2498 <module_user_init_hook+0x5c>)
 80a246a:	b113      	cbz	r3, 80a2472 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a246c:	4620      	mov	r0, r4
 80a246e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2472:	2100      	movs	r1, #0
 80a2474:	4808      	ldr	r0, [pc, #32]	; (80a2498 <module_user_init_hook+0x5c>)
 80a2476:	f7ff fdbd 	bl	80a1ff4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a247a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a247e:	2100      	movs	r1, #0
 80a2480:	4806      	ldr	r0, [pc, #24]	; (80a249c <module_user_init_hook+0x60>)
 80a2482:	f7ff bd2b 	b.w	80a1edc <system_ctrl_set_app_request_handler>
 80a2486:	bf00      	nop
 80a2488:	080a2341 	.word	0x080a2341
 80a248c:	40024000 	.word	0x40024000
 80a2490:	9a271c1e 	.word	0x9a271c1e
 80a2494:	200000d4 	.word	0x200000d4
 80a2498:	00000000 	.word	0x00000000
 80a249c:	080a2405 	.word	0x080a2405

080a24a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a24a0:	4770      	bx	lr

080a24a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a24a2:	2000      	movs	r0, #0
 80a24a4:	4770      	bx	lr

080a24a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a24a6:	b510      	push	{r4, lr}
 80a24a8:	4604      	mov	r4, r0
 80a24aa:	2110      	movs	r1, #16
 80a24ac:	f000 fe4c 	bl	80a3148 <_ZdlPvj>
 80a24b0:	4620      	mov	r0, r4
 80a24b2:	bd10      	pop	{r4, pc}

080a24b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a24b4:	b508      	push	{r3, lr}
      { delete this; }
 80a24b6:	f7ff fff6 	bl	80a24a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a24ba:	bd08      	pop	{r3, pc}

080a24bc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a24bc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a24be:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a24c0:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a24c4:	6002      	str	r2, [r0, #0]
 80a24c6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a24c8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24ca:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a24cc:	680c      	ldr	r4, [r1, #0]
 80a24ce:	8085      	strh	r5, [r0, #4]
 80a24d0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24d2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a24d4:	bd30      	pop	{r4, r5, pc}

080a24d6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a24d6:	b510      	push	{r4, lr}
 80a24d8:	4604      	mov	r4, r0
    free((void*)msg_);
 80a24da:	6800      	ldr	r0, [r0, #0]
 80a24dc:	f7ff fd9a 	bl	80a2014 <free>
}
 80a24e0:	4620      	mov	r0, r4
 80a24e2:	bd10      	pop	{r4, pc}

080a24e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a24e4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a24e6:	68c4      	ldr	r4, [r0, #12]
 80a24e8:	b1f4      	cbz	r4, 80a2528 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a24ea:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a24ec:	2b02      	cmp	r3, #2
 80a24ee:	d103      	bne.n	80a24f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a24f0:	f104 000c 	add.w	r0, r4, #12
 80a24f4:	f7ff ffef 	bl	80a24d6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a24f8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a24fa:	b135      	cbz	r5, 80a250a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a24fc:	4628      	mov	r0, r5
 80a24fe:	f7ff fefe 	bl	80a22fe <_ZNSt14_Function_baseD1Ev>
 80a2502:	2110      	movs	r1, #16
 80a2504:	4628      	mov	r0, r5
 80a2506:	f000 fe1f 	bl	80a3148 <_ZdlPvj>
 80a250a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a250c:	b135      	cbz	r5, 80a251c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a250e:	4628      	mov	r0, r5
 80a2510:	f7ff fef5 	bl	80a22fe <_ZNSt14_Function_baseD1Ev>
 80a2514:	2110      	movs	r1, #16
 80a2516:	4628      	mov	r0, r5
 80a2518:	f000 fe16 	bl	80a3148 <_ZdlPvj>
 80a251c:	4620      	mov	r0, r4
 80a251e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2522:	2114      	movs	r1, #20
 80a2524:	f000 be10 	b.w	80a3148 <_ZdlPvj>
 80a2528:	bd38      	pop	{r3, r4, r5, pc}

080a252a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a252a:	b510      	push	{r4, lr}
 80a252c:	b088      	sub	sp, #32
 80a252e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a2530:	4668      	mov	r0, sp
 80a2532:	f7ff fe27 	bl	80a2184 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a2536:	4669      	mov	r1, sp
 80a2538:	a804      	add	r0, sp, #16
 80a253a:	f7ff fe45 	bl	80a21c8 <_ZN6StringC1ERKS_>
 80a253e:	a804      	add	r0, sp, #16
 80a2540:	47a0      	blx	r4
 80a2542:	4604      	mov	r4, r0
 80a2544:	a804      	add	r0, sp, #16
 80a2546:	f7ff fdd3 	bl	80a20f0 <_ZN6StringD1Ev>
    String p(param);
 80a254a:	4668      	mov	r0, sp
 80a254c:	f7ff fdd0 	bl	80a20f0 <_ZN6StringD1Ev>
}
 80a2550:	4620      	mov	r0, r4
 80a2552:	b008      	add	sp, #32
 80a2554:	bd10      	pop	{r4, pc}

080a2556 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a2556:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a2558:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a255a:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a255c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a2560:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a2562:	4669      	mov	r1, sp
 80a2564:	461a      	mov	r2, r3
 80a2566:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a2568:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a256c:	f8ad 4000 	strh.w	r4, [sp]
 80a2570:	f7ff fd28 	bl	80a1fc4 <spark_function>
}
 80a2574:	b004      	add	sp, #16
 80a2576:	bd10      	pop	{r4, pc}

080a2578 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a2578:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a257a:	460e      	mov	r6, r1
 80a257c:	4604      	mov	r4, r0
 80a257e:	f856 3b04 	ldr.w	r3, [r6], #4
 80a2582:	460d      	mov	r5, r1
 80a2584:	a801      	add	r0, sp, #4
 80a2586:	4631      	mov	r1, r6
 80a2588:	9300      	str	r3, [sp, #0]
 80a258a:	f7ff fe9c 	bl	80a22c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a258e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2590:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2592:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a2594:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a2596:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a2598:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a259a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a259c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a259e:	f7fd ff0b 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a25a2:	4630      	mov	r0, r6
 80a25a4:	f7fd ff08 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a25a8:	4628      	mov	r0, r5
 80a25aa:	2108      	movs	r1, #8
 80a25ac:	f000 fdcc 	bl	80a3148 <_ZdlPvj>
        return p;
    }
 80a25b0:	4620      	mov	r0, r4
 80a25b2:	b002      	add	sp, #8
 80a25b4:	bd70      	pop	{r4, r5, r6, pc}

080a25b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a25b6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a25b8:	b510      	push	{r4, lr}
      if (_M_empty())
 80a25ba:	b90a      	cbnz	r2, 80a25c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a25bc:	f000 fdc8 	bl	80a3150 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a25c0:	68c3      	ldr	r3, [r0, #12]
    }
 80a25c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a25c6:	4718      	bx	r3

080a25c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a25c8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a25ca:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a25cc:	f100 0110 	add.w	r1, r0, #16
 80a25d0:	f7ff fff1 	bl	80a25b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a25d4:	bd08      	pop	{r3, pc}

080a25d6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a25d6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a25d8:	b510      	push	{r4, lr}
      if (_M_empty())
 80a25da:	b90a      	cbnz	r2, 80a25e0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a25dc:	f000 fdb8 	bl	80a3150 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a25e0:	68c3      	ldr	r3, [r0, #12]
    }
 80a25e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a25e6:	4718      	bx	r3

080a25e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a25e8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a25ea:	6800      	ldr	r0, [r0, #0]
 80a25ec:	f100 0110 	add.w	r1, r0, #16
 80a25f0:	f7ff fff1 	bl	80a25d6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a25f4:	bd08      	pop	{r3, pc}
	...

080a25f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a25f8:	b538      	push	{r3, r4, r5, lr}
 80a25fa:	2300      	movs	r3, #0
 80a25fc:	4604      	mov	r4, r0
 80a25fe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2600:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2602:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2604:	f7fd fd47 	bl	80a0096 <_Znwj>
 80a2608:	b128      	cbz	r0, 80a2616 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a260a:	2301      	movs	r3, #1
 80a260c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a2610:	4b02      	ldr	r3, [pc, #8]	; (80a261c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a2612:	60c5      	str	r5, [r0, #12]
 80a2614:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2616:	6020      	str	r0, [r4, #0]
	}
 80a2618:	4620      	mov	r0, r4
 80a261a:	bd38      	pop	{r3, r4, r5, pc}
 80a261c:	080a33b8 	.word	0x080a33b8

080a2620 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a2620:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a2622:	2300      	movs	r3, #0
 80a2624:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a2626:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a2628:	4604      	mov	r4, r0
 80a262a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a262c:	b12b      	cbz	r3, 80a263a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a262e:	2202      	movs	r2, #2
 80a2630:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2632:	68eb      	ldr	r3, [r5, #12]
 80a2634:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2636:	68ab      	ldr	r3, [r5, #8]
 80a2638:	60a3      	str	r3, [r4, #8]
    }
 80a263a:	4620      	mov	r0, r4
 80a263c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a2640:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2642:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a2644:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2646:	4668      	mov	r0, sp
 80a2648:	f7ff ff38 	bl	80a24bc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a264c:	f04f 0302 	mov.w	r3, #2
 80a2650:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a2654:	2a00      	cmp	r2, #0
 80a2656:	d103      	bne.n	80a2660 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a2658:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a265c:	2900      	cmp	r1, #0
 80a265e:	d1f7      	bne.n	80a2650 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a2660:	d125      	bne.n	80a26ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a2662:	f104 050c 	add.w	r5, r4, #12
 80a2666:	4669      	mov	r1, sp
 80a2668:	4628      	mov	r0, r5
 80a266a:	f7ff ff27 	bl	80a24bc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a266e:	2301      	movs	r3, #1
 80a2670:	f3bf 8f5b 	dmb	ish
 80a2674:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a2676:	2000      	movs	r0, #0
 80a2678:	f3bf 8f5b 	dmb	ish
 80a267c:	f104 0308 	add.w	r3, r4, #8
 80a2680:	e853 6f00 	ldrex	r6, [r3]
 80a2684:	e843 0200 	strex	r2, r0, [r3]
 80a2688:	2a00      	cmp	r2, #0
 80a268a:	d1f9      	bne.n	80a2680 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a268c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a2690:	b16e      	cbz	r6, 80a26ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a2692:	f7ff fc13 	bl	80a1ebc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a2696:	b178      	cbz	r0, 80a26b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2698:	4629      	mov	r1, r5
 80a269a:	4630      	mov	r0, r6
 80a269c:	f7ff ff8b 	bl	80a25b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a26a0:	4630      	mov	r0, r6
 80a26a2:	f7ff fe2c 	bl	80a22fe <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a26a6:	2110      	movs	r1, #16
 80a26a8:	4630      	mov	r0, r6
 80a26aa:	f000 fd4d 	bl	80a3148 <_ZdlPvj>
        p_->setError(std::move(error));
 80a26ae:	4668      	mov	r0, sp
 80a26b0:	f7ff ff11 	bl	80a24d6 <_ZN8particle5ErrorD1Ev>
    }
 80a26b4:	b009      	add	sp, #36	; 0x24
 80a26b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a26b8:	4631      	mov	r1, r6
 80a26ba:	a802      	add	r0, sp, #8
 80a26bc:	f7ff ffb0 	bl	80a2620 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a26c0:	68e0      	ldr	r0, [r4, #12]
 80a26c2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a26c6:	b108      	cbz	r0, 80a26cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a26c8:	f000 fd90 	bl	80a31ec <strdup>
        type_(type) {
 80a26cc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a26ce:	2010      	movs	r0, #16
 80a26d0:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a26d4:	f7fd fcdf 	bl	80a0096 <_Znwj>
 80a26d8:	4605      	mov	r5, r0
 80a26da:	b1e8      	cbz	r0, 80a2718 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a26dc:	2700      	movs	r7, #0
 80a26de:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a26e0:	2018      	movs	r0, #24
 80a26e2:	f7fd fcd8 	bl	80a0096 <_Znwj>
 80a26e6:	4604      	mov	r4, r0
 80a26e8:	b188      	cbz	r0, 80a270e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a26ea:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a26ec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a26ee:	a802      	add	r0, sp, #8
 80a26f0:	f7ff fe0e 	bl	80a2310 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26f4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a26f6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a26f8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a26fc:	9204      	str	r2, [sp, #16]
 80a26fe:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2700:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2702:	60e3      	str	r3, [r4, #12]
 80a2704:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a2708:	9205      	str	r2, [sp, #20]
 80a270a:	f7ff fed7 	bl	80a24bc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a270e:	4b08      	ldr	r3, [pc, #32]	; (80a2730 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2710:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2712:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2714:	4b07      	ldr	r3, [pc, #28]	; (80a2734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a2716:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a2718:	a806      	add	r0, sp, #24
 80a271a:	f7ff fedc 	bl	80a24d6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a271e:	a802      	add	r0, sp, #8
 80a2720:	f7ff fded 	bl	80a22fe <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2724:	2200      	movs	r2, #0
 80a2726:	4629      	mov	r1, r5
 80a2728:	4803      	ldr	r0, [pc, #12]	; (80a2738 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a272a:	f7ff fbcf 	bl	80a1ecc <application_thread_invoke>
 80a272e:	e7b7      	b.n	80a26a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a2730:	080a25c9 	.word	0x080a25c9
 80a2734:	080a2861 	.word	0x080a2861
 80a2738:	080a2d6d 	.word	0x080a2d6d

080a273c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2740:	b08a      	sub	sp, #40	; 0x28
 80a2742:	4605      	mov	r5, r0
 80a2744:	460c      	mov	r4, r1
 80a2746:	4617      	mov	r7, r2
 80a2748:	4698      	mov	r8, r3
 80a274a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a274e:	f7ff fc41 	bl	80a1fd4 <spark_cloud_flag_connected>
 80a2752:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a2754:	4682      	mov	sl, r0
 80a2756:	bb38      	cbnz	r0, 80a27a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a2758:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a275c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a275e:	a905      	add	r1, sp, #20
 80a2760:	4630      	mov	r0, r6
 80a2762:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2766:	f7ff fea9 	bl	80a24bc <_ZN8particle5ErrorC1EOS0_>
 80a276a:	2014      	movs	r0, #20
 80a276c:	f7fd fc93 	bl	80a0096 <_Znwj>
 80a2770:	4604      	mov	r4, r0
 80a2772:	b148      	cbz	r0, 80a2788 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2774:	2302      	movs	r3, #2
 80a2776:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2778:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a277a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a277e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a2780:	4631      	mov	r1, r6
 80a2782:	300c      	adds	r0, #12
 80a2784:	f7ff fe9a 	bl	80a24bc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2788:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a278a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a278c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a2790:	f7ff ff32 	bl	80a25f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2794:	4630      	mov	r0, r6
 80a2796:	f7ff fe9e 	bl	80a24d6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a279a:	a805      	add	r0, sp, #20
 80a279c:	f7ff fe9b 	bl	80a24d6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a27a0:	4628      	mov	r0, r5
 80a27a2:	b00a      	add	sp, #40	; 0x28
 80a27a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a27a8:	230c      	movs	r3, #12
 80a27aa:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a27ae:	2014      	movs	r0, #20
 80a27b0:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a27b4:	9307      	str	r3, [sp, #28]
 80a27b6:	f7fd fc6e 	bl	80a0096 <_Znwj>
 80a27ba:	4601      	mov	r1, r0
 80a27bc:	b128      	cbz	r0, 80a27ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a27be:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a27c2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a27c6:	f880 a001 	strb.w	sl, [r0, #1]
 80a27ca:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a27cc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a27ce:	f7ff ff13 	bl	80a25f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a27d2:	4b22      	ldr	r3, [pc, #136]	; (80a285c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a27d4:	2008      	movs	r0, #8
 80a27d6:	9308      	str	r3, [sp, #32]
 80a27d8:	f7fd fc5d 	bl	80a0096 <_Znwj>
 80a27dc:	4682      	mov	sl, r0
 80a27de:	b128      	cbz	r0, 80a27ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a27e0:	9b03      	ldr	r3, [sp, #12]
 80a27e2:	a904      	add	r1, sp, #16
 80a27e4:	f840 3b04 	str.w	r3, [r0], #4
 80a27e8:	f7ff fd6d 	bl	80a22c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a27ec:	4642      	mov	r2, r8
 80a27ee:	4639      	mov	r1, r7
 80a27f0:	4620      	mov	r0, r4
 80a27f2:	9600      	str	r6, [sp, #0]
 80a27f4:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a27f8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a27fc:	f7ff fbf2 	bl	80a1fe4 <spark_send_event>
 80a2800:	b9b8      	cbnz	r0, 80a2832 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a2802:	9b03      	ldr	r3, [sp, #12]
 80a2804:	785b      	ldrb	r3, [r3, #1]
 80a2806:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a280a:	b993      	cbnz	r3, 80a2832 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a280c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a2810:	a905      	add	r1, sp, #20
 80a2812:	a803      	add	r0, sp, #12
 80a2814:	9205      	str	r2, [sp, #20]
 80a2816:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a281a:	f7ff ff11 	bl	80a2640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a281e:	a805      	add	r0, sp, #20
 80a2820:	f7ff fe59 	bl	80a24d6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2824:	a805      	add	r0, sp, #20
 80a2826:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2828:	f7ff fea6 	bl	80a2578 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a282c:	a806      	add	r0, sp, #24
 80a282e:	f7fd fdc3 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2832:	9b03      	ldr	r3, [sp, #12]
 80a2834:	a904      	add	r1, sp, #16
 80a2836:	a806      	add	r0, sp, #24
 80a2838:	9305      	str	r3, [sp, #20]
 80a283a:	f7ff fd44 	bl	80a22c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a283e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2840:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2842:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a2844:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a2846:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a2848:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a284a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a284c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a284e:	f7fd fdb3 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2852:	a804      	add	r0, sp, #16
 80a2854:	f7fd fdb0 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a2858:	e7a2      	b.n	80a27a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a285a:	bf00      	nop
 80a285c:	080a2925 	.word	0x080a2925

080a2860 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a2860:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2864:	4605      	mov	r5, r0
	  switch (__op)
 80a2866:	d007      	beq.n	80a2878 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a2868:	2a03      	cmp	r2, #3
 80a286a:	d018      	beq.n	80a289e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a286c:	2a01      	cmp	r2, #1
 80a286e:	d101      	bne.n	80a2874 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a2870:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2872:	6003      	str	r3, [r0, #0]
	}
 80a2874:	2000      	movs	r0, #0
 80a2876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2878:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a287a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a287c:	f7fd fc0b 	bl	80a0096 <_Znwj>
 80a2880:	4604      	mov	r4, r0
 80a2882:	b150      	cbz	r0, 80a289a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2884:	4631      	mov	r1, r6
 80a2886:	f7ff fecb 	bl	80a2620 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a288a:	6930      	ldr	r0, [r6, #16]
 80a288c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a2890:	b108      	cbz	r0, 80a2896 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a2892:	f000 fcab 	bl	80a31ec <strdup>
        type_(type) {
 80a2896:	6120      	str	r0, [r4, #16]
 80a2898:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a289a:	602c      	str	r4, [r5, #0]
	}
 80a289c:	e7ea      	b.n	80a2874 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a289e:	6804      	ldr	r4, [r0, #0]
 80a28a0:	2c00      	cmp	r4, #0
 80a28a2:	d0e7      	beq.n	80a2874 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a28a4:	f104 0010 	add.w	r0, r4, #16
 80a28a8:	f7ff fe15 	bl	80a24d6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a28ac:	4620      	mov	r0, r4
 80a28ae:	f7ff fd26 	bl	80a22fe <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a28b2:	2118      	movs	r1, #24
 80a28b4:	4620      	mov	r0, r4
 80a28b6:	f000 fc47 	bl	80a3148 <_ZdlPvj>
 80a28ba:	e7db      	b.n	80a2874 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a28bc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a28bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a28be:	2300      	movs	r3, #0
 80a28c0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a28c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a28c4:	4604      	mov	r4, r0
 80a28c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a28c8:	b12b      	cbz	r3, 80a28d6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a28ca:	2202      	movs	r2, #2
 80a28cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a28ce:	68eb      	ldr	r3, [r5, #12]
 80a28d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a28d2:	68ab      	ldr	r3, [r5, #8]
 80a28d4:	60a3      	str	r3, [r4, #8]
    }
 80a28d6:	4620      	mov	r0, r4
 80a28d8:	bd38      	pop	{r3, r4, r5, pc}

080a28da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a28da:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a28dc:	b570      	push	{r4, r5, r6, lr}
 80a28de:	4604      	mov	r4, r0
	  switch (__op)
 80a28e0:	d007      	beq.n	80a28f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a28e2:	2a03      	cmp	r2, #3
 80a28e4:	d012      	beq.n	80a290c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a28e6:	2a01      	cmp	r2, #1
 80a28e8:	d101      	bne.n	80a28ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a28ea:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a28ec:	6003      	str	r3, [r0, #0]
	}
 80a28ee:	2000      	movs	r0, #0
 80a28f0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a28f2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a28f4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a28f6:	f7fd fbce 	bl	80a0096 <_Znwj>
 80a28fa:	4605      	mov	r5, r0
 80a28fc:	b120      	cbz	r0, 80a2908 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a28fe:	4631      	mov	r1, r6
 80a2900:	f7ff ffdc 	bl	80a28bc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2904:	7c33      	ldrb	r3, [r6, #16]
 80a2906:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a2908:	6025      	str	r5, [r4, #0]
	}
 80a290a:	e7f0      	b.n	80a28ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a290c:	6804      	ldr	r4, [r0, #0]
 80a290e:	2c00      	cmp	r4, #0
 80a2910:	d0ed      	beq.n	80a28ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a2912:	4620      	mov	r0, r4
 80a2914:	f7ff fcf3 	bl	80a22fe <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a2918:	2114      	movs	r1, #20
 80a291a:	4620      	mov	r0, r4
 80a291c:	f000 fc14 	bl	80a3148 <_ZdlPvj>
 80a2920:	e7e5      	b.n	80a28ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a2924 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2924:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2926:	4604      	mov	r4, r0
 80a2928:	b089      	sub	sp, #36	; 0x24
 80a292a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a292c:	a801      	add	r0, sp, #4
 80a292e:	4611      	mov	r1, r2
 80a2930:	f7ff fe22 	bl	80a2578 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2934:	b1a4      	cbz	r4, 80a2960 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a2936:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a2938:	b11d      	cbz	r5, 80a2942 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a293a:	4628      	mov	r0, r5
 80a293c:	f000 fc56 	bl	80a31ec <strdup>
 80a2940:	4605      	mov	r5, r0
 80a2942:	a801      	add	r0, sp, #4
 80a2944:	a903      	add	r1, sp, #12
        type_(type) {
 80a2946:	9503      	str	r5, [sp, #12]
 80a2948:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a294c:	f7ff fe78 	bl	80a2640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2950:	a803      	add	r0, sp, #12
 80a2952:	f7ff fdc0 	bl	80a24d6 <_ZN8particle5ErrorD1Ev>
 80a2956:	a802      	add	r0, sp, #8
 80a2958:	f7fd fd2e 	bl	80a03b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a295c:	b009      	add	sp, #36	; 0x24
 80a295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a2960:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a2962:	9d01      	ldr	r5, [sp, #4]
 80a2964:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a2968:	2a00      	cmp	r2, #0
 80a296a:	d103      	bne.n	80a2974 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a296c:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a2970:	2900      	cmp	r1, #0
 80a2972:	d1f7      	bne.n	80a2964 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a2974:	d1ef      	bne.n	80a2956 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a2976:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a2978:	f3bf 8f5b 	dmb	ish
 80a297c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a297e:	f3bf 8f5b 	dmb	ish
 80a2982:	1d2b      	adds	r3, r5, #4
 80a2984:	e853 6f00 	ldrex	r6, [r3]
 80a2988:	e843 4200 	strex	r2, r4, [r3]
 80a298c:	2a00      	cmp	r2, #0
 80a298e:	d1f9      	bne.n	80a2984 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a2990:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a2994:	2e00      	cmp	r6, #0
 80a2996:	d0de      	beq.n	80a2956 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a2998:	4620      	mov	r0, r4
 80a299a:	f7ff fa8f 	bl	80a1ebc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a299e:	4607      	mov	r7, r0
 80a29a0:	b160      	cbz	r0, 80a29bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a29a2:	4630      	mov	r0, r6
 80a29a4:	f105 010c 	add.w	r1, r5, #12
 80a29a8:	f7ff fe15 	bl	80a25d6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a29ac:	4630      	mov	r0, r6
 80a29ae:	f7ff fca6 	bl	80a22fe <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a29b2:	2110      	movs	r1, #16
 80a29b4:	4630      	mov	r0, r6
 80a29b6:	f000 fbc7 	bl	80a3148 <_ZdlPvj>
 80a29ba:	e7cc      	b.n	80a2956 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a29bc:	4631      	mov	r1, r6
 80a29be:	a803      	add	r0, sp, #12
 80a29c0:	f7ff ff7c 	bl	80a28bc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a29c4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a29c6:	2010      	movs	r0, #16
 80a29c8:	f88d 301c 	strb.w	r3, [sp, #28]
 80a29cc:	f7fd fb63 	bl	80a0096 <_Znwj>
 80a29d0:	4605      	mov	r5, r0
 80a29d2:	b1d0      	cbz	r0, 80a2a0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a29d4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a29d6:	2014      	movs	r0, #20
 80a29d8:	f7fd fb5d 	bl	80a0096 <_Znwj>
 80a29dc:	4604      	mov	r4, r0
 80a29de:	b178      	cbz	r0, 80a2a00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a29e0:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a29e2:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a29e4:	a803      	add	r0, sp, #12
 80a29e6:	f7ff fc93 	bl	80a2310 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a29ea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a29ec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a29ee:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a29f0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a29f2:	9205      	str	r2, [sp, #20]
 80a29f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a29f6:	60e3      	str	r3, [r4, #12]
 80a29f8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a29fc:	9206      	str	r2, [sp, #24]
 80a29fe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2a00:	4b06      	ldr	r3, [pc, #24]	; (80a2a1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2a02:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2a04:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2a06:	4b06      	ldr	r3, [pc, #24]	; (80a2a20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a2a08:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a2a0a:	a803      	add	r0, sp, #12
 80a2a0c:	f7ff fc77 	bl	80a22fe <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2a10:	2200      	movs	r2, #0
 80a2a12:	4629      	mov	r1, r5
 80a2a14:	4803      	ldr	r0, [pc, #12]	; (80a2a24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a2a16:	f7ff fa59 	bl	80a1ecc <application_thread_invoke>
 80a2a1a:	e7c7      	b.n	80a29ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a2a1c:	080a25e9 	.word	0x080a25e9
 80a2a20:	080a28db 	.word	0x080a28db
 80a2a24:	080a2d6d 	.word	0x080a2d6d

080a2a28 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2a28:	4770      	bx	lr

080a2a2a <_ZN9IPAddressD0Ev>:
 80a2a2a:	b510      	push	{r4, lr}
 80a2a2c:	4604      	mov	r4, r0
 80a2a2e:	2118      	movs	r1, #24
 80a2a30:	f000 fb8a 	bl	80a3148 <_ZdlPvj>
 80a2a34:	4620      	mov	r0, r4
 80a2a36:	bd10      	pop	{r4, pc}

080a2a38 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2a3a:	460e      	mov	r6, r1
 80a2a3c:	2400      	movs	r4, #0
 80a2a3e:	f100 0708 	add.w	r7, r0, #8
 80a2a42:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a2a44:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a2a48:	220a      	movs	r2, #10
 80a2a4a:	4630      	mov	r0, r6
 80a2a4c:	f7ff fc18 	bl	80a2280 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2a50:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2a52:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a2a54:	d101      	bne.n	80a2a5a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a2a56:	4620      	mov	r0, r4
 80a2a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a2a5a:	2c00      	cmp	r4, #0
 80a2a5c:	d0f2      	beq.n	80a2a44 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2a5e:	212e      	movs	r1, #46	; 0x2e
 80a2a60:	4630      	mov	r0, r6
 80a2a62:	f7ff fbf4 	bl	80a224e <_ZN5Print5printEc>
 80a2a66:	4404      	add	r4, r0
 80a2a68:	e7ec      	b.n	80a2a44 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a2a6c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a2a6c:	b510      	push	{r4, lr}
 80a2a6e:	4604      	mov	r4, r0
 80a2a70:	4b04      	ldr	r3, [pc, #16]	; (80a2a84 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2a72:	2211      	movs	r2, #17
 80a2a74:	2100      	movs	r1, #0
 80a2a76:	f840 3b04 	str.w	r3, [r0], #4
 80a2a7a:	f000 fb80 	bl	80a317e <memset>
}
 80a2a7e:	4620      	mov	r0, r4
 80a2a80:	bd10      	pop	{r4, pc}
 80a2a82:	bf00      	nop
 80a2a84:	080a33d4 	.word	0x080a33d4

080a2a88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2a88:	4603      	mov	r3, r0
 80a2a8a:	4a07      	ldr	r2, [pc, #28]	; (80a2aa8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2a8c:	b510      	push	{r4, lr}
 80a2a8e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a2a92:	f101 0210 	add.w	r2, r1, #16
 80a2a96:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2a9a:	4291      	cmp	r1, r2
 80a2a9c:	f843 4b04 	str.w	r4, [r3], #4
 80a2aa0:	d1f9      	bne.n	80a2a96 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2aa2:	780a      	ldrb	r2, [r1, #0]
 80a2aa4:	701a      	strb	r2, [r3, #0]
}
 80a2aa6:	bd10      	pop	{r4, pc}
 80a2aa8:	080a33d4 	.word	0x080a33d4

080a2aac <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a2aac:	4a02      	ldr	r2, [pc, #8]	; (80a2ab8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a2aae:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a2ab2:	2204      	movs	r2, #4
 80a2ab4:	7502      	strb	r2, [r0, #20]
}
 80a2ab6:	4770      	bx	lr
 80a2ab8:	080a33d4 	.word	0x080a33d4

080a2abc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a2abc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2abe:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2ac2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a2ac6:	2304      	movs	r3, #4
 80a2ac8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2acc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a2ad0:	6044      	str	r4, [r0, #4]
 80a2ad2:	7503      	strb	r3, [r0, #20]
}
 80a2ad4:	bd10      	pop	{r4, pc}
	...

080a2ad8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2ada:	4d04      	ldr	r5, [pc, #16]	; (80a2aec <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2adc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2ade:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2ae2:	9500      	str	r5, [sp, #0]
 80a2ae4:	f7ff ffea 	bl	80a2abc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2ae8:	b003      	add	sp, #12
 80a2aea:	bd30      	pop	{r4, r5, pc}
 80a2aec:	080a33d4 	.word	0x080a33d4

080a2af0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2af0:	7441      	strb	r1, [r0, #17]
}
 80a2af2:	4770      	bx	lr

080a2af4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2af4:	4770      	bx	lr

080a2af6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2af6:	4770      	bx	lr

080a2af8 <_ZN9USBSerial4readEv>:
{
 80a2af8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2afa:	2100      	movs	r1, #0
 80a2afc:	7c00      	ldrb	r0, [r0, #16]
 80a2afe:	f7ff f9ad 	bl	80a1e5c <HAL_USB_USART_Receive_Data>
}
 80a2b02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2b06:	bd08      	pop	{r3, pc}

080a2b08 <_ZN9USBSerial4peekEv>:
{
 80a2b08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2b0a:	2101      	movs	r1, #1
 80a2b0c:	7c00      	ldrb	r0, [r0, #16]
 80a2b0e:	f7ff f9a5 	bl	80a1e5c <HAL_USB_USART_Receive_Data>
}
 80a2b12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2b16:	bd08      	pop	{r3, pc}

080a2b18 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2b18:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2b1a:	7c00      	ldrb	r0, [r0, #16]
 80a2b1c:	f7ff f996 	bl	80a1e4c <HAL_USB_USART_Available_Data_For_Write>
}
 80a2b20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2b24:	bd08      	pop	{r3, pc}

080a2b26 <_ZN9USBSerial9availableEv>:
{
 80a2b26:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2b28:	7c00      	ldrb	r0, [r0, #16]
 80a2b2a:	f7ff f987 	bl	80a1e3c <HAL_USB_USART_Available_Data>
}
 80a2b2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2b32:	bd08      	pop	{r3, pc}

080a2b34 <_ZN9USBSerial5writeEh>:
{
 80a2b34:	b538      	push	{r3, r4, r5, lr}
 80a2b36:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2b38:	7c00      	ldrb	r0, [r0, #16]
{
 80a2b3a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2b3c:	f7ff f986 	bl	80a1e4c <HAL_USB_USART_Available_Data_For_Write>
 80a2b40:	2800      	cmp	r0, #0
 80a2b42:	dc01      	bgt.n	80a2b48 <_ZN9USBSerial5writeEh+0x14>
 80a2b44:	7c60      	ldrb	r0, [r4, #17]
 80a2b46:	b128      	cbz	r0, 80a2b54 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2b48:	4629      	mov	r1, r5
 80a2b4a:	7c20      	ldrb	r0, [r4, #16]
 80a2b4c:	f7ff f98e 	bl	80a1e6c <HAL_USB_USART_Send_Data>
 80a2b50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2b54:	bd38      	pop	{r3, r4, r5, pc}

080a2b56 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2b56:	7c00      	ldrb	r0, [r0, #16]
 80a2b58:	f7ff b990 	b.w	80a1e7c <HAL_USB_USART_Flush_Data>

080a2b5c <_ZN9USBSerialD0Ev>:
 80a2b5c:	b510      	push	{r4, lr}
 80a2b5e:	4604      	mov	r4, r0
 80a2b60:	2114      	movs	r1, #20
 80a2b62:	f000 faf1 	bl	80a3148 <_ZdlPvj>
 80a2b66:	4620      	mov	r0, r4
 80a2b68:	bd10      	pop	{r4, pc}

080a2b6a <__tcf_1>:
 80a2b6a:	4770      	bx	lr

080a2b6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2b6c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2b72:	4604      	mov	r4, r0
 80a2b74:	4608      	mov	r0, r1
 80a2b76:	2100      	movs	r1, #0
 80a2b78:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2b7c:	4b04      	ldr	r3, [pc, #16]	; (80a2b90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2b7e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2b80:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2b82:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2b84:	4611      	mov	r1, r2
  _blocking = true;
 80a2b86:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2b88:	f7ff f948 	bl	80a1e1c <HAL_USB_USART_Init>
}
 80a2b8c:	4620      	mov	r0, r4
 80a2b8e:	bd10      	pop	{r4, pc}
 80a2b90:	080a33e8 	.word	0x080a33e8

080a2b94 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2b94:	2200      	movs	r2, #0
 80a2b96:	7c00      	ldrb	r0, [r0, #16]
 80a2b98:	f7ff b948 	b.w	80a1e2c <HAL_USB_USART_Begin>

080a2b9c <_Z19acquireSerialBufferv>:
{
 80a2b9c:	b510      	push	{r4, lr}
 80a2b9e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2ba0:	2214      	movs	r2, #20
 80a2ba2:	2100      	movs	r1, #0
 80a2ba4:	f000 faeb 	bl	80a317e <memset>
}
 80a2ba8:	4620      	mov	r0, r4
 80a2baa:	bd10      	pop	{r4, pc}

080a2bac <_Z16_fetch_usbserialv>:
{
 80a2bac:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2bae:	4d0e      	ldr	r5, [pc, #56]	; (80a2be8 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2bb0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2bb2:	a801      	add	r0, sp, #4
 80a2bb4:	f7ff fff2 	bl	80a2b9c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2bb8:	7829      	ldrb	r1, [r5, #0]
 80a2bba:	f3bf 8f5b 	dmb	ish
 80a2bbe:	f011 0401 	ands.w	r4, r1, #1
 80a2bc2:	d10e      	bne.n	80a2be2 <_Z16_fetch_usbserialv+0x36>
 80a2bc4:	4628      	mov	r0, r5
 80a2bc6:	f7fd fa6c 	bl	80a00a2 <__cxa_guard_acquire>
 80a2bca:	b150      	cbz	r0, 80a2be2 <_Z16_fetch_usbserialv+0x36>
 80a2bcc:	4621      	mov	r1, r4
 80a2bce:	aa01      	add	r2, sp, #4
 80a2bd0:	4806      	ldr	r0, [pc, #24]	; (80a2bec <_Z16_fetch_usbserialv+0x40>)
 80a2bd2:	f7ff ffcb 	bl	80a2b6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2bd6:	4628      	mov	r0, r5
 80a2bd8:	f7fd fa68 	bl	80a00ac <__cxa_guard_release>
 80a2bdc:	4804      	ldr	r0, [pc, #16]	; (80a2bf0 <_Z16_fetch_usbserialv+0x44>)
 80a2bde:	f000 faba 	bl	80a3156 <atexit>
	return _usbserial;
}
 80a2be2:	4802      	ldr	r0, [pc, #8]	; (80a2bec <_Z16_fetch_usbserialv+0x40>)
 80a2be4:	b007      	add	sp, #28
 80a2be6:	bd30      	pop	{r4, r5, pc}
 80a2be8:	200000dc 	.word	0x200000dc
 80a2bec:	200000e4 	.word	0x200000e4
 80a2bf0:	080a2af5 	.word	0x080a2af5

080a2bf4 <_Z23acquireUSBSerial1Bufferv>:
 80a2bf4:	b510      	push	{r4, lr}
 80a2bf6:	4604      	mov	r4, r0
 80a2bf8:	2214      	movs	r2, #20
 80a2bfa:	2100      	movs	r1, #0
 80a2bfc:	f000 fabf 	bl	80a317e <memset>
 80a2c00:	4620      	mov	r0, r4
 80a2c02:	bd10      	pop	{r4, pc}

080a2c04 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2c04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2c06:	4c0e      	ldr	r4, [pc, #56]	; (80a2c40 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a2c08:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2c0a:	a801      	add	r0, sp, #4
 80a2c0c:	f7ff fff2 	bl	80a2bf4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2c10:	7823      	ldrb	r3, [r4, #0]
 80a2c12:	f3bf 8f5b 	dmb	ish
 80a2c16:	07db      	lsls	r3, r3, #31
 80a2c18:	d40e      	bmi.n	80a2c38 <_Z17_fetch_usbserial1v+0x34>
 80a2c1a:	4620      	mov	r0, r4
 80a2c1c:	f7fd fa41 	bl	80a00a2 <__cxa_guard_acquire>
 80a2c20:	b150      	cbz	r0, 80a2c38 <_Z17_fetch_usbserial1v+0x34>
 80a2c22:	2101      	movs	r1, #1
 80a2c24:	aa01      	add	r2, sp, #4
 80a2c26:	4807      	ldr	r0, [pc, #28]	; (80a2c44 <_Z17_fetch_usbserial1v+0x40>)
 80a2c28:	f7ff ffa0 	bl	80a2b6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2c2c:	4620      	mov	r0, r4
 80a2c2e:	f7fd fa3d 	bl	80a00ac <__cxa_guard_release>
 80a2c32:	4805      	ldr	r0, [pc, #20]	; (80a2c48 <_Z17_fetch_usbserial1v+0x44>)
 80a2c34:	f000 fa8f 	bl	80a3156 <atexit>
  return _usbserial1;
}
 80a2c38:	4802      	ldr	r0, [pc, #8]	; (80a2c44 <_Z17_fetch_usbserial1v+0x40>)
 80a2c3a:	b006      	add	sp, #24
 80a2c3c:	bd10      	pop	{r4, pc}
 80a2c3e:	bf00      	nop
 80a2c40:	200000e0 	.word	0x200000e0
 80a2c44:	200000f8 	.word	0x200000f8
 80a2c48:	080a2b6b 	.word	0x080a2b6b

080a2c4c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2c4c:	4770      	bx	lr

080a2c4e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2c4e:	7441      	strb	r1, [r0, #17]
}
 80a2c50:	4770      	bx	lr

080a2c52 <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a2c52:	4770      	bx	lr

080a2c54 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a2c54:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2c56:	7c00      	ldrb	r0, [r0, #16]
 80a2c58:	f7ff f876 	bl	80a1d48 <hal_usart_available_data_for_write>
}
 80a2c5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2c60:	bd08      	pop	{r3, pc}

080a2c62 <_ZN11USARTSerial9availableEv>:
{
 80a2c62:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a2c64:	7c00      	ldrb	r0, [r0, #16]
 80a2c66:	f7ff f847 	bl	80a1cf8 <hal_usart_available>
}
 80a2c6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2c6e:	bd08      	pop	{r3, pc}

080a2c70 <_ZN11USARTSerial4peekEv>:
{
 80a2c70:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2c72:	7c00      	ldrb	r0, [r0, #16]
 80a2c74:	f7ff f850 	bl	80a1d18 <hal_usart_peek>
}
 80a2c78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2c7c:	bd08      	pop	{r3, pc}

080a2c7e <_ZN11USARTSerial4readEv>:
{
 80a2c7e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a2c80:	7c00      	ldrb	r0, [r0, #16]
 80a2c82:	f7ff f841 	bl	80a1d08 <hal_usart_read>
}
 80a2c86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2c8a:	bd08      	pop	{r3, pc}

080a2c8c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a2c8c:	7c00      	ldrb	r0, [r0, #16]
 80a2c8e:	f7ff b84b 	b.w	80a1d28 <hal_usart_flush>

080a2c92 <_ZN11USARTSerial5writeEh>:
{
 80a2c92:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c94:	7c46      	ldrb	r6, [r0, #17]
{
 80a2c96:	4604      	mov	r4, r0
 80a2c98:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c9a:	b12e      	cbz	r6, 80a2ca8 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a2c9c:	4629      	mov	r1, r5
 80a2c9e:	7c20      	ldrb	r0, [r4, #16]
}
 80a2ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2ca4:	f7ff b820 	b.w	80a1ce8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2ca8:	7c00      	ldrb	r0, [r0, #16]
 80a2caa:	f7ff f84d 	bl	80a1d48 <hal_usart_available_data_for_write>
 80a2cae:	2800      	cmp	r0, #0
 80a2cb0:	dcf4      	bgt.n	80a2c9c <_ZN11USARTSerial5writeEh+0xa>
}
 80a2cb2:	4630      	mov	r0, r6
 80a2cb4:	bd70      	pop	{r4, r5, r6, pc}

080a2cb6 <_ZN11USARTSerialD0Ev>:
 80a2cb6:	b510      	push	{r4, lr}
 80a2cb8:	4604      	mov	r4, r0
 80a2cba:	2114      	movs	r1, #20
 80a2cbc:	f000 fa44 	bl	80a3148 <_ZdlPvj>
 80a2cc0:	4620      	mov	r0, r4
 80a2cc2:	bd10      	pop	{r4, pc}

080a2cc4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a2cc4:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2cc8:	b510      	push	{r4, lr}
 80a2cca:	4604      	mov	r4, r0
 80a2ccc:	4608      	mov	r0, r1
 80a2cce:	4611      	mov	r1, r2
 80a2cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2cd4:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a2cd8:	4a04      	ldr	r2, [pc, #16]	; (80a2cec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a2cda:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2cdc:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a2cde:	2201      	movs	r2, #1
 80a2ce0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a2ce2:	461a      	mov	r2, r3
 80a2ce4:	f7fe fff8 	bl	80a1cd8 <hal_usart_init>
}
 80a2ce8:	4620      	mov	r0, r4
 80a2cea:	bd10      	pop	{r4, pc}
 80a2cec:	080a3418 	.word	0x080a3418

080a2cf0 <_Z22__fetch_global_Serial1v>:
{
 80a2cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
 80a2cf2:	4c19      	ldr	r4, [pc, #100]	; (80a2d58 <_Z22__fetch_global_Serial1v+0x68>)
 80a2cf4:	6826      	ldr	r6, [r4, #0]
 80a2cf6:	b94e      	cbnz	r6, 80a2d0c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a2cf8:	2084      	movs	r0, #132	; 0x84
 80a2cfa:	f7fd f9cc 	bl	80a0096 <_Znwj>
 80a2cfe:	4605      	mov	r5, r0
 80a2d00:	b118      	cbz	r0, 80a2d0a <_Z22__fetch_global_Serial1v+0x1a>
 80a2d02:	2284      	movs	r2, #132	; 0x84
 80a2d04:	4631      	mov	r1, r6
 80a2d06:	f000 fa3a 	bl	80a317e <memset>
 80a2d0a:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
 80a2d0c:	4d13      	ldr	r5, [pc, #76]	; (80a2d5c <_Z22__fetch_global_Serial1v+0x6c>)
 80a2d0e:	682f      	ldr	r7, [r5, #0]
 80a2d10:	b94f      	cbnz	r7, 80a2d26 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a2d12:	2084      	movs	r0, #132	; 0x84
 80a2d14:	f7fd f9bf 	bl	80a0096 <_Znwj>
 80a2d18:	4606      	mov	r6, r0
 80a2d1a:	b118      	cbz	r0, 80a2d24 <_Z22__fetch_global_Serial1v+0x34>
 80a2d1c:	2284      	movs	r2, #132	; 0x84
 80a2d1e:	4639      	mov	r1, r7
 80a2d20:	f000 fa2d 	bl	80a317e <memset>
 80a2d24:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a2d26:	4f0e      	ldr	r7, [pc, #56]	; (80a2d60 <_Z22__fetch_global_Serial1v+0x70>)
 80a2d28:	7839      	ldrb	r1, [r7, #0]
 80a2d2a:	f3bf 8f5b 	dmb	ish
 80a2d2e:	f011 0601 	ands.w	r6, r1, #1
 80a2d32:	d10f      	bne.n	80a2d54 <_Z22__fetch_global_Serial1v+0x64>
 80a2d34:	4638      	mov	r0, r7
 80a2d36:	f7fd f9b4 	bl	80a00a2 <__cxa_guard_acquire>
 80a2d3a:	b158      	cbz	r0, 80a2d54 <_Z22__fetch_global_Serial1v+0x64>
 80a2d3c:	4631      	mov	r1, r6
 80a2d3e:	682b      	ldr	r3, [r5, #0]
 80a2d40:	6822      	ldr	r2, [r4, #0]
 80a2d42:	4808      	ldr	r0, [pc, #32]	; (80a2d64 <_Z22__fetch_global_Serial1v+0x74>)
 80a2d44:	f7ff ffbe 	bl	80a2cc4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2d48:	4638      	mov	r0, r7
 80a2d4a:	f7fd f9af 	bl	80a00ac <__cxa_guard_release>
 80a2d4e:	4806      	ldr	r0, [pc, #24]	; (80a2d68 <_Z22__fetch_global_Serial1v+0x78>)
 80a2d50:	f000 fa01 	bl	80a3156 <atexit>
#endif
	return serial1;
}
 80a2d54:	4803      	ldr	r0, [pc, #12]	; (80a2d64 <_Z22__fetch_global_Serial1v+0x74>)
 80a2d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2d58:	20000110 	.word	0x20000110
 80a2d5c:	20000114 	.word	0x20000114
 80a2d60:	2000010c 	.word	0x2000010c
 80a2d64:	20000118 	.word	0x20000118
 80a2d68:	080a2c53 	.word	0x080a2c53

080a2d6c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2d6c:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2d6e:	6883      	ldr	r3, [r0, #8]
 80a2d70:	4604      	mov	r4, r0
 80a2d72:	b90b      	cbnz	r3, 80a2d78 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2d74:	f000 f9ec 	bl	80a3150 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2d78:	68c3      	ldr	r3, [r0, #12]
 80a2d7a:	4798      	blx	r3
      if (_M_manager)
 80a2d7c:	68a3      	ldr	r3, [r4, #8]
 80a2d7e:	b11b      	cbz	r3, 80a2d88 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2d80:	2203      	movs	r2, #3
 80a2d82:	4621      	mov	r1, r4
 80a2d84:	4620      	mov	r0, r4
 80a2d86:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2d88:	4620      	mov	r0, r4
}
 80a2d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a2d8e:	2110      	movs	r1, #16
 80a2d90:	f000 b9da 	b.w	80a3148 <_ZdlPvj>

080a2d94 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a2d94:	4770      	bx	lr

080a2d96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2d98:	4606      	mov	r6, r0
 80a2d9a:	4615      	mov	r5, r2
 80a2d9c:	460c      	mov	r4, r1
 80a2d9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2da0:	42bc      	cmp	r4, r7
 80a2da2:	d006      	beq.n	80a2db2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2da4:	6833      	ldr	r3, [r6, #0]
 80a2da6:	4630      	mov	r0, r6
 80a2da8:	689b      	ldr	r3, [r3, #8]
 80a2daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2dae:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a2db0:	e7f6      	b.n	80a2da0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a2db2:	4628      	mov	r0, r5
 80a2db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2db6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a2db6:	2200      	movs	r2, #0
 80a2db8:	7c00      	ldrb	r0, [r0, #16]
 80a2dba:	f7fe bfcd 	b.w	80a1d58 <hal_i2c_write>

080a2dbe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a2dbe:	2100      	movs	r1, #0
 80a2dc0:	7c00      	ldrb	r0, [r0, #16]
 80a2dc2:	f7fe bfd1 	b.w	80a1d68 <hal_i2c_available>

080a2dc6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a2dc6:	2100      	movs	r1, #0
 80a2dc8:	7c00      	ldrb	r0, [r0, #16]
 80a2dca:	f7fe bfd5 	b.w	80a1d78 <hal_i2c_read>

080a2dce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a2dce:	2100      	movs	r1, #0
 80a2dd0:	7c00      	ldrb	r0, [r0, #16]
 80a2dd2:	f7fe bfd9 	b.w	80a1d88 <hal_i2c_peek>

080a2dd6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a2dd6:	2100      	movs	r1, #0
 80a2dd8:	7c00      	ldrb	r0, [r0, #16]
 80a2dda:	f7fe bfdd 	b.w	80a1d98 <hal_i2c_flush>

080a2dde <_ZN7TwoWireD0Ev>:
 80a2dde:	b510      	push	{r4, lr}
 80a2de0:	4604      	mov	r4, r0
 80a2de2:	2114      	movs	r1, #20
 80a2de4:	f000 f9b0 	bl	80a3148 <_ZdlPvj>
 80a2de8:	4620      	mov	r0, r4
 80a2dea:	bd10      	pop	{r4, pc}

080a2dec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2dec:	b510      	push	{r4, lr}
 80a2dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2df2:	4604      	mov	r4, r0
 80a2df4:	4608      	mov	r0, r1
 80a2df6:	2100      	movs	r1, #0
 80a2df8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2dfc:	4b03      	ldr	r3, [pc, #12]	; (80a2e0c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a2dfe:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2e00:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a2e02:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a2e04:	f7fe ffd8 	bl	80a1db8 <hal_i2c_init>
}
 80a2e08:	4620      	mov	r0, r4
 80a2e0a:	bd10      	pop	{r4, pc}
 80a2e0c:	080a3448 	.word	0x080a3448

080a2e10 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2e10:	2200      	movs	r2, #0
 80a2e12:	6840      	ldr	r0, [r0, #4]
 80a2e14:	4611      	mov	r1, r2
 80a2e16:	f7ff b88d 	b.w	80a1f34 <network_ready>

080a2e1a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2e1c:	4615      	mov	r5, r2
 80a2e1e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2e20:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2e22:	460e      	mov	r6, r1
 80a2e24:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2e26:	2100      	movs	r1, #0
 80a2e28:	a803      	add	r0, sp, #12
 80a2e2a:	f000 f9a8 	bl	80a317e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2e2e:	4628      	mov	r0, r5
 80a2e30:	f000 f9f7 	bl	80a3222 <strlen>
 80a2e34:	2700      	movs	r7, #0
 80a2e36:	b281      	uxth	r1, r0
 80a2e38:	6873      	ldr	r3, [r6, #4]
 80a2e3a:	4628      	mov	r0, r5
 80a2e3c:	9700      	str	r7, [sp, #0]
 80a2e3e:	aa03      	add	r2, sp, #12
 80a2e40:	f7ff f824 	bl	80a1e8c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2e44:	b130      	cbz	r0, 80a2e54 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2e46:	4639      	mov	r1, r7
 80a2e48:	4620      	mov	r0, r4
 80a2e4a:	f7ff fe2f 	bl	80a2aac <_ZN9IPAddressC1Em>
    }
 80a2e4e:	4620      	mov	r0, r4
 80a2e50:	b009      	add	sp, #36	; 0x24
 80a2e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2e54:	4620      	mov	r0, r4
 80a2e56:	a903      	add	r1, sp, #12
 80a2e58:	f7ff fe16 	bl	80a2a88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2e5c:	e7f7      	b.n	80a2e4e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2e5e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2e5e:	2200      	movs	r2, #0
 80a2e60:	6840      	ldr	r0, [r0, #4]
 80a2e62:	4611      	mov	r1, r2
 80a2e64:	f7ff b886 	b.w	80a1f74 <network_listening>

080a2e68 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2e68:	2200      	movs	r2, #0
 80a2e6a:	6840      	ldr	r0, [r0, #4]
 80a2e6c:	4611      	mov	r1, r2
 80a2e6e:	f7ff b891 	b.w	80a1f94 <network_get_listen_timeout>

080a2e72 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2e72:	2200      	movs	r2, #0
 80a2e74:	6840      	ldr	r0, [r0, #4]
 80a2e76:	f7ff b885 	b.w	80a1f84 <network_set_listen_timeout>

080a2e7a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2e7a:	2200      	movs	r2, #0
 80a2e7c:	6840      	ldr	r0, [r0, #4]
 80a2e7e:	f081 0101 	eor.w	r1, r1, #1
 80a2e82:	f7ff b86f 	b.w	80a1f64 <network_listen>

080a2e86 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2e86:	2300      	movs	r3, #0
 80a2e88:	6840      	ldr	r0, [r0, #4]
 80a2e8a:	461a      	mov	r2, r3
 80a2e8c:	4619      	mov	r1, r3
 80a2e8e:	f7ff b861 	b.w	80a1f54 <network_off>

080a2e92 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2e92:	2200      	movs	r2, #0
 80a2e94:	6840      	ldr	r0, [r0, #4]
 80a2e96:	4611      	mov	r1, r2
 80a2e98:	f7ff b83c 	b.w	80a1f14 <network_connecting>

080a2e9c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2e9c:	2200      	movs	r2, #0
 80a2e9e:	2102      	movs	r1, #2
 80a2ea0:	6840      	ldr	r0, [r0, #4]
 80a2ea2:	f7ff b83f 	b.w	80a1f24 <network_disconnect>

080a2ea6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2ea6:	2300      	movs	r3, #0
 80a2ea8:	6840      	ldr	r0, [r0, #4]
 80a2eaa:	461a      	mov	r2, r3
 80a2eac:	f7ff b82a 	b.w	80a1f04 <network_connect>

080a2eb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2eb0:	2204      	movs	r2, #4
 80a2eb2:	4b02      	ldr	r3, [pc, #8]	; (80a2ebc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2eb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2eb6:	4a02      	ldr	r2, [pc, #8]	; (80a2ec0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2eb8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2eba:	4770      	bx	lr
 80a2ebc:	2000012c 	.word	0x2000012c
 80a2ec0:	080a3470 	.word	0x080a3470

080a2ec4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2ec4:	2300      	movs	r3, #0
 80a2ec6:	6840      	ldr	r0, [r0, #4]
 80a2ec8:	461a      	mov	r2, r3
 80a2eca:	f7ff b81b 	b.w	80a1f04 <network_connect>

080a2ece <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2ece:	2200      	movs	r2, #0
 80a2ed0:	2102      	movs	r1, #2
 80a2ed2:	6840      	ldr	r0, [r0, #4]
 80a2ed4:	f7ff b826 	b.w	80a1f24 <network_disconnect>

080a2ed8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2ed8:	2200      	movs	r2, #0
 80a2eda:	6840      	ldr	r0, [r0, #4]
 80a2edc:	4611      	mov	r1, r2
 80a2ede:	f7ff b819 	b.w	80a1f14 <network_connecting>

080a2ee2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2ee2:	2200      	movs	r2, #0
 80a2ee4:	6840      	ldr	r0, [r0, #4]
 80a2ee6:	4611      	mov	r1, r2
 80a2ee8:	f7ff b824 	b.w	80a1f34 <network_ready>

080a2eec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2eec:	2300      	movs	r3, #0
 80a2eee:	6840      	ldr	r0, [r0, #4]
 80a2ef0:	461a      	mov	r2, r3
 80a2ef2:	4619      	mov	r1, r3
 80a2ef4:	f7ff b826 	b.w	80a1f44 <network_on>

080a2ef8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2ef8:	2300      	movs	r3, #0
 80a2efa:	6840      	ldr	r0, [r0, #4]
 80a2efc:	461a      	mov	r2, r3
 80a2efe:	4619      	mov	r1, r3
 80a2f00:	f7ff b828 	b.w	80a1f54 <network_off>

080a2f04 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2f04:	2100      	movs	r1, #0
 80a2f06:	6840      	ldr	r0, [r0, #4]
 80a2f08:	f7ff b84c 	b.w	80a1fa4 <network_is_on>

080a2f0c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2f0c:	2100      	movs	r1, #0
 80a2f0e:	6840      	ldr	r0, [r0, #4]
 80a2f10:	f7ff b850 	b.w	80a1fb4 <network_is_off>

080a2f14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2f14:	2200      	movs	r2, #0
 80a2f16:	6840      	ldr	r0, [r0, #4]
 80a2f18:	f081 0101 	eor.w	r1, r1, #1
 80a2f1c:	f7ff b822 	b.w	80a1f64 <network_listen>

080a2f20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2f20:	2200      	movs	r2, #0
 80a2f22:	6840      	ldr	r0, [r0, #4]
 80a2f24:	f7ff b82e 	b.w	80a1f84 <network_set_listen_timeout>

080a2f28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2f28:	2200      	movs	r2, #0
 80a2f2a:	6840      	ldr	r0, [r0, #4]
 80a2f2c:	4611      	mov	r1, r2
 80a2f2e:	f7ff b831 	b.w	80a1f94 <network_get_listen_timeout>

080a2f32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2f32:	2200      	movs	r2, #0
 80a2f34:	6840      	ldr	r0, [r0, #4]
 80a2f36:	4611      	mov	r1, r2
 80a2f38:	f7ff b81c 	b.w	80a1f74 <network_listening>

080a2f3c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2f3c:	b570      	push	{r4, r5, r6, lr}
 80a2f3e:	4615      	mov	r5, r2
 80a2f40:	b08e      	sub	sp, #56	; 0x38
 80a2f42:	4604      	mov	r4, r0
    IPAddress addr;
 80a2f44:	a808      	add	r0, sp, #32
 80a2f46:	f7ff fd91 	bl	80a2a6c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2f4a:	2211      	movs	r2, #17
 80a2f4c:	2100      	movs	r1, #0
 80a2f4e:	a803      	add	r0, sp, #12
 80a2f50:	f000 f915 	bl	80a317e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2f54:	2600      	movs	r6, #0
 80a2f56:	4628      	mov	r0, r5
 80a2f58:	f000 f963 	bl	80a3222 <strlen>
 80a2f5c:	4b0a      	ldr	r3, [pc, #40]	; (80a2f88 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2f5e:	9600      	str	r6, [sp, #0]
 80a2f60:	b281      	uxth	r1, r0
 80a2f62:	685b      	ldr	r3, [r3, #4]
 80a2f64:	4628      	mov	r0, r5
 80a2f66:	aa03      	add	r2, sp, #12
 80a2f68:	f7fe ff90 	bl	80a1e8c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2f6c:	b130      	cbz	r0, 80a2f7c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2f6e:	4631      	mov	r1, r6
 80a2f70:	4620      	mov	r0, r4
 80a2f72:	f7ff fd9b 	bl	80a2aac <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2f76:	4620      	mov	r0, r4
 80a2f78:	b00e      	add	sp, #56	; 0x38
 80a2f7a:	bd70      	pop	{r4, r5, r6, pc}
 80a2f7c:	4620      	mov	r0, r4
 80a2f7e:	a903      	add	r1, sp, #12
 80a2f80:	f7ff fd82 	bl	80a2a88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2f84:	e7f7      	b.n	80a2f76 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2f86:	bf00      	nop
 80a2f88:	2000012c 	.word	0x2000012c

080a2f8c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2f8c:	4b02      	ldr	r3, [pc, #8]	; (80a2f98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2f8e:	4a03      	ldr	r2, [pc, #12]	; (80a2f9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2f90:	601a      	str	r2, [r3, #0]
 80a2f92:	2200      	movs	r2, #0
 80a2f94:	605a      	str	r2, [r3, #4]

} // spark
 80a2f96:	4770      	bx	lr
 80a2f98:	20000134 	.word	0x20000134
 80a2f9c:	080a34ac 	.word	0x080a34ac

080a2fa0 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2fa0:	4b02      	ldr	r3, [pc, #8]	; (80a2fac <__tcf_0+0xc>)
 80a2fa2:	6898      	ldr	r0, [r3, #8]
 80a2fa4:	b108      	cbz	r0, 80a2faa <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2fa6:	f7fe be7f 	b.w	80a1ca8 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2faa:	4770      	bx	lr
 80a2fac:	200000a0 	.word	0x200000a0

080a2fb0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2fb0:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2fb2:	b570      	push	{r4, r5, r6, lr}
 80a2fb4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2fb6:	d901      	bls.n	80a2fbc <pinAvailable+0xc>
    return false;
 80a2fb8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2fba:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2fbc:	f1a0 030d 	sub.w	r3, r0, #13
 80a2fc0:	2b02      	cmp	r3, #2
 80a2fc2:	d90b      	bls.n	80a2fdc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2fc4:	2801      	cmp	r0, #1
 80a2fc6:	d824      	bhi.n	80a3012 <pinAvailable+0x62>
 80a2fc8:	f000 f89a 	bl	80a3100 <_Z19__fetch_global_Wirev>
 80a2fcc:	2100      	movs	r1, #0
 80a2fce:	7c00      	ldrb	r0, [r0, #16]
 80a2fd0:	f7fe feea 	bl	80a1da8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2fd4:	f080 0001 	eor.w	r0, r0, #1
 80a2fd8:	b2c0      	uxtb	r0, r0
 80a2fda:	e7ee      	b.n	80a2fba <pinAvailable+0xa>
 80a2fdc:	4e12      	ldr	r6, [pc, #72]	; (80a3028 <pinAvailable+0x78>)
 80a2fde:	7831      	ldrb	r1, [r6, #0]
 80a2fe0:	f3bf 8f5b 	dmb	ish
 80a2fe4:	f011 0501 	ands.w	r5, r1, #1
 80a2fe8:	d10d      	bne.n	80a3006 <pinAvailable+0x56>
 80a2fea:	4630      	mov	r0, r6
 80a2fec:	f7fd f859 	bl	80a00a2 <__cxa_guard_acquire>
 80a2ff0:	b148      	cbz	r0, 80a3006 <pinAvailable+0x56>
 80a2ff2:	4629      	mov	r1, r5
 80a2ff4:	480d      	ldr	r0, [pc, #52]	; (80a302c <pinAvailable+0x7c>)
 80a2ff6:	f7ff f838 	bl	80a206a <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2ffa:	4630      	mov	r0, r6
 80a2ffc:	f7fd f856 	bl	80a00ac <__cxa_guard_release>
 80a3000:	480b      	ldr	r0, [pc, #44]	; (80a3030 <pinAvailable+0x80>)
 80a3002:	f000 f8a8 	bl	80a3156 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3006:	4b09      	ldr	r3, [pc, #36]	; (80a302c <pinAvailable+0x7c>)
 80a3008:	7818      	ldrb	r0, [r3, #0]
 80a300a:	f7fe feff 	bl	80a1e0c <hal_spi_is_enabled>
 80a300e:	2800      	cmp	r0, #0
 80a3010:	d1d2      	bne.n	80a2fb8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3012:	3c12      	subs	r4, #18
 80a3014:	2c01      	cmp	r4, #1
 80a3016:	d805      	bhi.n	80a3024 <pinAvailable+0x74>
 80a3018:	f7ff fe6a 	bl	80a2cf0 <_Z22__fetch_global_Serial1v>
 80a301c:	7c00      	ldrb	r0, [r0, #16]
 80a301e:	f7fe fe8b 	bl	80a1d38 <hal_usart_is_enabled>
 80a3022:	e7d7      	b.n	80a2fd4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3024:	2001      	movs	r0, #1
 80a3026:	e7c8      	b.n	80a2fba <pinAvailable+0xa>
 80a3028:	2000009c 	.word	0x2000009c
 80a302c:	200000a0 	.word	0x200000a0
 80a3030:	080a2fa1 	.word	0x080a2fa1

080a3034 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3034:	2817      	cmp	r0, #23
{
 80a3036:	b538      	push	{r3, r4, r5, lr}
 80a3038:	4604      	mov	r4, r0
 80a303a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a303c:	d80a      	bhi.n	80a3054 <pinMode+0x20>
 80a303e:	29ff      	cmp	r1, #255	; 0xff
 80a3040:	d008      	beq.n	80a3054 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3042:	f7ff ffb5 	bl	80a2fb0 <pinAvailable>
 80a3046:	b128      	cbz	r0, 80a3054 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3048:	4629      	mov	r1, r5
 80a304a:	4620      	mov	r0, r4
}
 80a304c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3050:	f7fe bdea 	b.w	80a1c28 <HAL_Pin_Mode>
}
 80a3054:	bd38      	pop	{r3, r4, r5, pc}

080a3056 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3056:	b538      	push	{r3, r4, r5, lr}
 80a3058:	4604      	mov	r4, r0
 80a305a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a305c:	f7fe fdec 	bl	80a1c38 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3060:	28ff      	cmp	r0, #255	; 0xff
 80a3062:	d010      	beq.n	80a3086 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3064:	2806      	cmp	r0, #6
 80a3066:	d804      	bhi.n	80a3072 <digitalWrite+0x1c>
 80a3068:	234d      	movs	r3, #77	; 0x4d
 80a306a:	fa23 f000 	lsr.w	r0, r3, r0
 80a306e:	07c3      	lsls	r3, r0, #31
 80a3070:	d409      	bmi.n	80a3086 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3072:	4620      	mov	r0, r4
 80a3074:	f7ff ff9c 	bl	80a2fb0 <pinAvailable>
 80a3078:	b128      	cbz	r0, 80a3086 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a307a:	4629      	mov	r1, r5
 80a307c:	4620      	mov	r0, r4
}
 80a307e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3082:	f7fe bde1 	b.w	80a1c48 <HAL_GPIO_Write>
}
 80a3086:	bd38      	pop	{r3, r4, r5, pc}

080a3088 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3088:	b510      	push	{r4, lr}
 80a308a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a308c:	f7fe fdd4 	bl	80a1c38 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a3090:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a3092:	b2db      	uxtb	r3, r3
 80a3094:	2b01      	cmp	r3, #1
 80a3096:	d908      	bls.n	80a30aa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3098:	4620      	mov	r0, r4
 80a309a:	f7ff ff89 	bl	80a2fb0 <pinAvailable>
 80a309e:	b120      	cbz	r0, 80a30aa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a30a0:	4620      	mov	r0, r4
}
 80a30a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a30a6:	f7fe bdd7 	b.w	80a1c58 <HAL_GPIO_Read>
}
 80a30aa:	2000      	movs	r0, #0
 80a30ac:	bd10      	pop	{r4, pc}
	...

080a30b0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a30b0:	2300      	movs	r3, #0
 80a30b2:	b507      	push	{r0, r1, r2, lr}
 80a30b4:	461a      	mov	r2, r3
 80a30b6:	4619      	mov	r1, r3
 80a30b8:	9300      	str	r3, [sp, #0]
 80a30ba:	4803      	ldr	r0, [pc, #12]	; (80a30c8 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a30bc:	f7ff fd0c 	bl	80a2ad8 <_ZN9IPAddressC1Ehhhh>
 80a30c0:	b003      	add	sp, #12
 80a30c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a30c6:	bf00      	nop
 80a30c8:	20000140 	.word	0x20000140

080a30cc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a30cc:	4770      	bx	lr
	...

080a30d0 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a30d0:	2300      	movs	r3, #0
{
 80a30d2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a30d4:	2520      	movs	r5, #32
 80a30d6:	8043      	strh	r3, [r0, #2]
 80a30d8:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30da:	4e08      	ldr	r6, [pc, #32]	; (80a30fc <_Z17acquireWireBufferv+0x2c>)
{
 80a30dc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a30de:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30e0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a30e2:	6085      	str	r5, [r0, #8]
 80a30e4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30e6:	4628      	mov	r0, r5
 80a30e8:	f000 f830 	bl	80a314c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30ec:	4631      	mov	r1, r6
	};
 80a30ee:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a30f0:	4628      	mov	r0, r5
 80a30f2:	f000 f82b 	bl	80a314c <_ZnajRKSt9nothrow_t>
	};
 80a30f6:	60e0      	str	r0, [r4, #12]
}
 80a30f8:	4620      	mov	r0, r4
 80a30fa:	bd70      	pop	{r4, r5, r6, pc}
 80a30fc:	080a34e0 	.word	0x080a34e0

080a3100 <_Z19__fetch_global_Wirev>:
{
 80a3100:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3102:	4d0e      	ldr	r5, [pc, #56]	; (80a313c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a3104:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3106:	7829      	ldrb	r1, [r5, #0]
 80a3108:	f3bf 8f5b 	dmb	ish
 80a310c:	f011 0401 	ands.w	r4, r1, #1
 80a3110:	d111      	bne.n	80a3136 <_Z19__fetch_global_Wirev+0x36>
 80a3112:	4628      	mov	r0, r5
 80a3114:	f7fc ffc5 	bl	80a00a2 <__cxa_guard_acquire>
 80a3118:	b168      	cbz	r0, 80a3136 <_Z19__fetch_global_Wirev+0x36>
 80a311a:	a801      	add	r0, sp, #4
 80a311c:	f7ff ffd8 	bl	80a30d0 <_Z17acquireWireBufferv>
 80a3120:	4621      	mov	r1, r4
 80a3122:	aa01      	add	r2, sp, #4
 80a3124:	4806      	ldr	r0, [pc, #24]	; (80a3140 <_Z19__fetch_global_Wirev+0x40>)
 80a3126:	f7ff fe61 	bl	80a2dec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a312a:	4628      	mov	r0, r5
 80a312c:	f7fc ffbe 	bl	80a00ac <__cxa_guard_release>
 80a3130:	4804      	ldr	r0, [pc, #16]	; (80a3144 <_Z19__fetch_global_Wirev+0x44>)
 80a3132:	f000 f810 	bl	80a3156 <atexit>
	return wire;
}
 80a3136:	4802      	ldr	r0, [pc, #8]	; (80a3140 <_Z19__fetch_global_Wirev+0x40>)
 80a3138:	b007      	add	sp, #28
 80a313a:	bd30      	pop	{r4, r5, pc}
 80a313c:	20000158 	.word	0x20000158
 80a3140:	2000015c 	.word	0x2000015c
 80a3144:	080a30cd 	.word	0x080a30cd

080a3148 <_ZdlPvj>:
 80a3148:	f7fc bfa9 	b.w	80a009e <_ZdlPv>

080a314c <_ZnajRKSt9nothrow_t>:
 80a314c:	f7fc bfa5 	b.w	80a009a <_Znaj>

080a3150 <_ZSt25__throw_bad_function_callv>:
 80a3150:	b508      	push	{r3, lr}
 80a3152:	f7fe ff6f 	bl	80a2034 <abort>

080a3156 <atexit>:
 80a3156:	2300      	movs	r3, #0
 80a3158:	4601      	mov	r1, r0
 80a315a:	461a      	mov	r2, r3
 80a315c:	4618      	mov	r0, r3
 80a315e:	f000 b869 	b.w	80a3234 <__register_exitproc>

080a3162 <memcpy>:
 80a3162:	440a      	add	r2, r1
 80a3164:	4291      	cmp	r1, r2
 80a3166:	f100 33ff 	add.w	r3, r0, #4294967295
 80a316a:	d100      	bne.n	80a316e <memcpy+0xc>
 80a316c:	4770      	bx	lr
 80a316e:	b510      	push	{r4, lr}
 80a3170:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3174:	4291      	cmp	r1, r2
 80a3176:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a317a:	d1f9      	bne.n	80a3170 <memcpy+0xe>
 80a317c:	bd10      	pop	{r4, pc}

080a317e <memset>:
 80a317e:	4603      	mov	r3, r0
 80a3180:	4402      	add	r2, r0
 80a3182:	4293      	cmp	r3, r2
 80a3184:	d100      	bne.n	80a3188 <memset+0xa>
 80a3186:	4770      	bx	lr
 80a3188:	f803 1b01 	strb.w	r1, [r3], #1
 80a318c:	e7f9      	b.n	80a3182 <memset+0x4>
	...

080a3190 <srand>:
 80a3190:	b538      	push	{r3, r4, r5, lr}
 80a3192:	4b0d      	ldr	r3, [pc, #52]	; (80a31c8 <srand+0x38>)
 80a3194:	4604      	mov	r4, r0
 80a3196:	681d      	ldr	r5, [r3, #0]
 80a3198:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a319a:	b97b      	cbnz	r3, 80a31bc <srand+0x2c>
 80a319c:	2018      	movs	r0, #24
 80a319e:	f7fe ff31 	bl	80a2004 <malloc>
 80a31a2:	4a0a      	ldr	r2, [pc, #40]	; (80a31cc <srand+0x3c>)
 80a31a4:	4b0a      	ldr	r3, [pc, #40]	; (80a31d0 <srand+0x40>)
 80a31a6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a31a8:	e9c0 2300 	strd	r2, r3, [r0]
 80a31ac:	4b09      	ldr	r3, [pc, #36]	; (80a31d4 <srand+0x44>)
 80a31ae:	2201      	movs	r2, #1
 80a31b0:	6083      	str	r3, [r0, #8]
 80a31b2:	230b      	movs	r3, #11
 80a31b4:	8183      	strh	r3, [r0, #12]
 80a31b6:	2300      	movs	r3, #0
 80a31b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a31bc:	2200      	movs	r2, #0
 80a31be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a31c0:	611c      	str	r4, [r3, #16]
 80a31c2:	615a      	str	r2, [r3, #20]
 80a31c4:	bd38      	pop	{r3, r4, r5, pc}
 80a31c6:	bf00      	nop
 80a31c8:	20000010 	.word	0x20000010
 80a31cc:	abcd330e 	.word	0xabcd330e
 80a31d0:	e66d1234 	.word	0xe66d1234
 80a31d4:	0005deec 	.word	0x0005deec

080a31d8 <strcmp>:
 80a31d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a31dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a31e0:	2a01      	cmp	r2, #1
 80a31e2:	bf28      	it	cs
 80a31e4:	429a      	cmpcs	r2, r3
 80a31e6:	d0f7      	beq.n	80a31d8 <strcmp>
 80a31e8:	1ad0      	subs	r0, r2, r3
 80a31ea:	4770      	bx	lr

080a31ec <strdup>:
 80a31ec:	4b02      	ldr	r3, [pc, #8]	; (80a31f8 <strdup+0xc>)
 80a31ee:	4601      	mov	r1, r0
 80a31f0:	6818      	ldr	r0, [r3, #0]
 80a31f2:	f000 b803 	b.w	80a31fc <_strdup_r>
 80a31f6:	bf00      	nop
 80a31f8:	20000010 	.word	0x20000010

080a31fc <_strdup_r>:
 80a31fc:	b570      	push	{r4, r5, r6, lr}
 80a31fe:	4604      	mov	r4, r0
 80a3200:	4608      	mov	r0, r1
 80a3202:	460d      	mov	r5, r1
 80a3204:	f000 f80d 	bl	80a3222 <strlen>
 80a3208:	1c46      	adds	r6, r0, #1
 80a320a:	4631      	mov	r1, r6
 80a320c:	4620      	mov	r0, r4
 80a320e:	f7fe ff19 	bl	80a2044 <_malloc_r>
 80a3212:	4604      	mov	r4, r0
 80a3214:	b118      	cbz	r0, 80a321e <_strdup_r+0x22>
 80a3216:	4632      	mov	r2, r6
 80a3218:	4629      	mov	r1, r5
 80a321a:	f7ff ffa2 	bl	80a3162 <memcpy>
 80a321e:	4620      	mov	r0, r4
 80a3220:	bd70      	pop	{r4, r5, r6, pc}

080a3222 <strlen>:
 80a3222:	4603      	mov	r3, r0
 80a3224:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3228:	2a00      	cmp	r2, #0
 80a322a:	d1fb      	bne.n	80a3224 <strlen+0x2>
 80a322c:	1a18      	subs	r0, r3, r0
 80a322e:	3801      	subs	r0, #1
 80a3230:	4770      	bx	lr
	...

080a3234 <__register_exitproc>:
 80a3234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3238:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a32f8 <__register_exitproc+0xc4>
 80a323c:	4606      	mov	r6, r0
 80a323e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3242:	461f      	mov	r7, r3
 80a3244:	460d      	mov	r5, r1
 80a3246:	4691      	mov	r9, r2
 80a3248:	f000 f858 	bl	80a32fc <__retarget_lock_acquire_recursive>
 80a324c:	4b26      	ldr	r3, [pc, #152]	; (80a32e8 <__register_exitproc+0xb4>)
 80a324e:	681c      	ldr	r4, [r3, #0]
 80a3250:	b934      	cbnz	r4, 80a3260 <__register_exitproc+0x2c>
 80a3252:	4c26      	ldr	r4, [pc, #152]	; (80a32ec <__register_exitproc+0xb8>)
 80a3254:	601c      	str	r4, [r3, #0]
 80a3256:	4b26      	ldr	r3, [pc, #152]	; (80a32f0 <__register_exitproc+0xbc>)
 80a3258:	b113      	cbz	r3, 80a3260 <__register_exitproc+0x2c>
 80a325a:	681b      	ldr	r3, [r3, #0]
 80a325c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3260:	6863      	ldr	r3, [r4, #4]
 80a3262:	2b1f      	cmp	r3, #31
 80a3264:	dd07      	ble.n	80a3276 <__register_exitproc+0x42>
 80a3266:	f8d8 0000 	ldr.w	r0, [r8]
 80a326a:	f000 f849 	bl	80a3300 <__retarget_lock_release_recursive>
 80a326e:	f04f 30ff 	mov.w	r0, #4294967295
 80a3272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3276:	b35e      	cbz	r6, 80a32d0 <__register_exitproc+0x9c>
 80a3278:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a327c:	b988      	cbnz	r0, 80a32a2 <__register_exitproc+0x6e>
 80a327e:	4b1d      	ldr	r3, [pc, #116]	; (80a32f4 <__register_exitproc+0xc0>)
 80a3280:	b923      	cbnz	r3, 80a328c <__register_exitproc+0x58>
 80a3282:	f8d8 0000 	ldr.w	r0, [r8]
 80a3286:	f000 f83a 	bl	80a32fe <__retarget_lock_release>
 80a328a:	e7f0      	b.n	80a326e <__register_exitproc+0x3a>
 80a328c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3290:	f7fe feb8 	bl	80a2004 <malloc>
 80a3294:	2800      	cmp	r0, #0
 80a3296:	d0f4      	beq.n	80a3282 <__register_exitproc+0x4e>
 80a3298:	2300      	movs	r3, #0
 80a329a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a329e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a32a2:	2201      	movs	r2, #1
 80a32a4:	6863      	ldr	r3, [r4, #4]
 80a32a6:	2e02      	cmp	r6, #2
 80a32a8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a32ac:	fa02 f203 	lsl.w	r2, r2, r3
 80a32b0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a32b4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a32b8:	ea43 0302 	orr.w	r3, r3, r2
 80a32bc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a32c0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a32c4:	bf02      	ittt	eq
 80a32c6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a32ca:	431a      	orreq	r2, r3
 80a32cc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a32d0:	6863      	ldr	r3, [r4, #4]
 80a32d2:	f8d8 0000 	ldr.w	r0, [r8]
 80a32d6:	1c5a      	adds	r2, r3, #1
 80a32d8:	3302      	adds	r3, #2
 80a32da:	6062      	str	r2, [r4, #4]
 80a32dc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a32e0:	f000 f80e 	bl	80a3300 <__retarget_lock_release_recursive>
 80a32e4:	2000      	movs	r0, #0
 80a32e6:	e7c4      	b.n	80a3272 <__register_exitproc+0x3e>
 80a32e8:	200001fc 	.word	0x200001fc
 80a32ec:	20000170 	.word	0x20000170
 80a32f0:	00000000 	.word	0x00000000
 80a32f4:	080a2005 	.word	0x080a2005
 80a32f8:	20000074 	.word	0x20000074

080a32fc <__retarget_lock_acquire_recursive>:
 80a32fc:	4770      	bx	lr

080a32fe <__retarget_lock_release>:
 80a32fe:	4770      	bx	lr

080a3300 <__retarget_lock_release_recursive>:
 80a3300:	4770      	bx	lr

080a3302 <link_code_end>:
	...

080a3304 <dynalib_user>:
 80a3304:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a3314:	0000 0000 4d53 6653 6f72 006d 6c63 6165     ....SMSfrom.clea
 80a3324:	0072 7562 7474 6e6f 0032 7562 7474 6e6f     r.button2.button
 80a3334:	0033 7562 7474 6e6f 0034 6e6f 7200 6961     3.button4.on.rai
 80a3344:	626e 776f 0029 6172 6e69 6f62 0077 6572     nbow).rainbow.re
 80a3354:	2964 7200 6465 6200 756c 2965 6200 756c     d).red.blue).blu
 80a3364:	0065 7267 6565 296e 6700 6572 6e65 6e00     e.green).green.n
 80a3374:	746f 6b6f 0000 0000                         otok....

080a337c <CSWTCH.189>:
 80a337c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a338c:	0050 0000 7061 0070 5925 252d 2d6d 6425     P...app.%Y-%m-%d
 80a339c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a33ac:	6d69 0065                                   ime.

080a33b0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a33b8:	24a1 080a 24a7 080a 24e5 080a 24b5 080a     .$...$...$...$..
 80a33c8:	24a3 080a                                   .$..

080a33cc <_ZTV9IPAddress>:
	...
 80a33d4:	2a39 080a 2a29 080a 2a2b 080a               9*..)*..+*..

080a33e0 <_ZTV9USBSerial>:
	...
 80a33e8:	2af7 080a 2b5d 080a 2b35 080a 2203 080a     .*..]+..5+..."..
 80a33f8:	2b27 080a 2af9 080a 2b09 080a 2b57 080a     '+...*...+..W+..
 80a3408:	2b19 080a 2af1 080a                         .+...*..

080a3410 <_ZTV11USARTSerial>:
	...
 80a3418:	2c4d 080a 2cb7 080a 2c93 080a 2203 080a     M,...,...,..."..
 80a3428:	2c63 080a 2c7f 080a 2c71 080a 2c8d 080a     c,...,..q,...,..
 80a3438:	2c4f 080a 2c55 080a                         O,..U,..

080a3440 <_ZTV7TwoWire>:
	...
 80a3448:	2d95 080a 2ddf 080a 2db7 080a 2d97 080a     .-...-...-...-..
 80a3458:	2dbf 080a 2dc7 080a 2dcf 080a 2dd7 080a     .-...-...-...-..

080a3468 <_ZTVN5spark9WiFiClassE>:
	...
 80a3470:	2ea7 080a 2e9d 080a 2e93 080a 2e11 080a     ................
 80a3480:	22bb 080a 2e87 080a 2f05 080a 2f0d 080a     ."......./.../..
 80a3490:	2e7b 080a 2e73 080a 2e69 080a 2e5f 080a     {...s...i..._...
 80a34a0:	2e1b 080a                                   ....

080a34a4 <_ZTVN5spark12NetworkClassE>:
	...
 80a34ac:	2ec5 080a 2ecf 080a 2ed9 080a 2ee3 080a     ................
 80a34bc:	2eed 080a 2ef9 080a 2f05 080a 2f0d 080a     ........./.../..
 80a34cc:	2f15 080a 2f21 080a 2f29 080a 2f33 080a     ./..!/..)/..3/..
 80a34dc:	2f3d 080a                                   =/..

080a34e0 <_ZSt7nothrow>:
	...

080a34e1 <link_const_variable_data_end>:
 80a34e1:	00          	.byte	0x00
	...

080a34e4 <link_constructors_location>:
 80a34e4:	080a0645 	.word	0x080a0645
 80a34e8:	080a0819 	.word	0x080a0819
 80a34ec:	080a1ae9 	.word	0x080a1ae9
 80a34f0:	080a20cd 	.word	0x080a20cd
 80a34f4:	080a22d5 	.word	0x080a22d5
 80a34f8:	080a22e5 	.word	0x080a22e5
 80a34fc:	080a2335 	.word	0x080a2335
 80a3500:	080a2eb1 	.word	0x080a2eb1
 80a3504:	080a2f8d 	.word	0x080a2f8d
 80a3508:	080a30b1 	.word	0x080a30b1

080a350c <link_constructors_end>:
 80a350c:	00000000 	.word	0x00000000
